tp0:     file format elf32-tradbigmips


Disassembly of section .init:

000009c4 <_init>:
 9c4:	3c1c0002 	lui	gp,0x2
 9c8:	279ca00c 	addiu	gp,gp,-24564
 9cc:	0399e021 	addu	gp,gp,t9
 9d0:	27bdffe0 	addiu	sp,sp,-32
 9d4:	afbc0010 	sw	gp,16(sp)
 9d8:	afbf001c 	sw	ra,28(sp)
 9dc:	8f8280a0 	lw	v0,-32608(gp)
 9e0:	10400004 	beqz	v0,9f4 <_init+0x30>
 9e4:	00000000 	nop
 9e8:	8f9980a0 	lw	t9,-32608(gp)
 9ec:	0320f809 	jalr	t9
 9f0:	00000000 	nop
 9f4:	8fbf001c 	lw	ra,28(sp)
 9f8:	03e00008 	jr	ra
 9fc:	27bd0020 	addiu	sp,sp,32

Disassembly of section .text:

00000a00 <__start>:
     a00:	03e00025 	move	zero,ra
     a04:	04110001 	bal	a0c <__start+0xc>
     a08:	00000000 	nop
     a0c:	3c1c0002 	lui	gp,0x2
     a10:	279c9fc4 	addiu	gp,gp,-24636
     a14:	039fe021 	addu	gp,gp,ra
     a18:	0000f825 	move	ra,zero
     a1c:	8f848018 	lw	a0,-32744(gp)
     a20:	8fa50000 	lw	a1,0(sp)
     a24:	27a60004 	addiu	a2,sp,4
     a28:	2401fff8 	li	at,-8
     a2c:	03a1e824 	and	sp,sp,at
     a30:	27bdffe0 	addiu	sp,sp,-32
     a34:	8f87801c 	lw	a3,-32740(gp)
     a38:	8f888020 	lw	t0,-32736(gp)
     a3c:	afa80010 	sw	t0,16(sp)
     a40:	afa20014 	sw	v0,20(sp)
     a44:	afbd0018 	sw	sp,24(sp)
     a48:	8f998094 	lw	t9,-32620(gp)
     a4c:	0320f809 	jalr	t9
     a50:	00000000 	nop

00000a54 <hlt>:
     a54:	1000ffff 	b	a54 <hlt>
     a58:	00000000 	nop
     a5c:	00000000 	nop

00000a60 <deregister_tm_clones>:
     a60:	3c1c0002 	lui	gp,0x2
     a64:	279c9f70 	addiu	gp,gp,-24720
     a68:	0399e021 	addu	gp,gp,t9
     a6c:	8f848028 	lw	a0,-32728(gp)
     a70:	8f828024 	lw	v0,-32732(gp)
     a74:	248429d4 	addiu	a0,a0,10708
     a78:	24420003 	addiu	v0,v0,3
     a7c:	00441023 	subu	v0,v0,a0
     a80:	2c420007 	sltiu	v0,v0,7
     a84:	14400005 	bnez	v0,a9c <deregister_tm_clones+0x3c>
     a88:	8f9980d0 	lw	t9,-32560(gp)
     a8c:	13200003 	beqz	t9,a9c <deregister_tm_clones+0x3c>
     a90:	00000000 	nop
     a94:	03200008 	jr	t9
     a98:	00000000 	nop
     a9c:	03e00008 	jr	ra
     aa0:	00000000 	nop

00000aa4 <register_tm_clones>:
     aa4:	3c1c0002 	lui	gp,0x2
     aa8:	279c9f2c 	addiu	gp,gp,-24788
     aac:	0399e021 	addu	gp,gp,t9
     ab0:	8f848028 	lw	a0,-32728(gp)
     ab4:	8f858024 	lw	a1,-32732(gp)
     ab8:	248429d4 	addiu	a0,a0,10708
     abc:	00a42823 	subu	a1,a1,a0
     ac0:	00052883 	sra	a1,a1,0x2
     ac4:	000517c2 	srl	v0,a1,0x1f
     ac8:	00452821 	addu	a1,v0,a1
     acc:	00052843 	sra	a1,a1,0x1
     ad0:	10a00005 	beqz	a1,ae8 <register_tm_clones+0x44>
     ad4:	8f998074 	lw	t9,-32652(gp)
     ad8:	13200003 	beqz	t9,ae8 <register_tm_clones+0x44>
     adc:	00000000 	nop
     ae0:	03200008 	jr	t9
     ae4:	00000000 	nop
     ae8:	03e00008 	jr	ra
     aec:	00000000 	nop

00000af0 <__do_global_dtors_aux>:
     af0:	3c1c0002 	lui	gp,0x2
     af4:	279c9ee0 	addiu	gp,gp,-24864
     af8:	0399e021 	addu	gp,gp,t9
     afc:	27bdffe0 	addiu	sp,sp,-32
     b00:	afb00018 	sw	s0,24(sp)
     b04:	8f908028 	lw	s0,-32728(gp)
     b08:	afbc0010 	sw	gp,16(sp)
     b0c:	afbf001c 	sw	ra,28(sp)
     b10:	92022ab0 	lbu	v0,10928(s0)
     b14:	1440000d 	bnez	v0,b4c <__do_global_dtors_aux+0x5c>
     b18:	8f8280d4 	lw	v0,-32556(gp)
     b1c:	10400005 	beqz	v0,b34 <__do_global_dtors_aux+0x44>
     b20:	8f82802c 	lw	v0,-32724(gp)
     b24:	8f9980d4 	lw	t9,-32556(gp)
     b28:	0320f809 	jalr	t9
     b2c:	8c440000 	lw	a0,0(v0)
     b30:	8fbc0010 	lw	gp,16(sp)
     b34:	8f998030 	lw	t9,-32720(gp)
     b38:	27390a60 	addiu	t9,t9,2656
     b3c:	0411ffc8 	bal	a60 <deregister_tm_clones>
     b40:	00000000 	nop
     b44:	24020001 	li	v0,1
     b48:	a2022ab0 	sb	v0,10928(s0)
     b4c:	8fbf001c 	lw	ra,28(sp)
     b50:	8fb00018 	lw	s0,24(sp)
     b54:	03e00008 	jr	ra
     b58:	27bd0020 	addiu	sp,sp,32

00000b5c <frame_dummy>:
     b5c:	3c1c0002 	lui	gp,0x2
     b60:	279c9e74 	addiu	gp,gp,-24972
     b64:	0399e021 	addu	gp,gp,t9
     b68:	8f828028 	lw	v0,-32728(gp)
     b6c:	27bdffe0 	addiu	sp,sp,-32
     b70:	244429bc 	addiu	a0,v0,10684
     b74:	afbc0010 	sw	gp,16(sp)
     b78:	afbf001c 	sw	ra,28(sp)
     b7c:	8c820000 	lw	v0,0(a0)
     b80:	14400006 	bnez	v0,b9c <frame_dummy+0x40>
     b84:	8f99807c 	lw	t9,-32644(gp)
     b88:	8f998030 	lw	t9,-32720(gp)
     b8c:	8fbf001c 	lw	ra,28(sp)
     b90:	27390aa4 	addiu	t9,t9,2724
     b94:	1000ffc3 	b	aa4 <register_tm_clones>
     b98:	27bd0020 	addiu	sp,sp,32
     b9c:	1320fffa 	beqz	t9,b88 <frame_dummy+0x2c>
     ba0:	00000000 	nop
     ba4:	0320f809 	jalr	t9
     ba8:	00000000 	nop
     bac:	1000fff6 	b	b88 <frame_dummy+0x2c>
     bb0:	8fbc0010 	lw	gp,16(sp)
	...

00000bc0 <encode>:
 *      Author: german
 */
#include "conversor.h"
#include <errno.h>

int encode (char* input, char*output, int pipe){
     bc0:	3c1c0002 	lui	gp,0x2
     bc4:	279c9e10 	addiu	gp,gp,-25072
     bc8:	0399e021 	addu	gp,gp,t9
     bcc:	27bdff68 	addiu	sp,sp,-152
     bd0:	afbf0094 	sw	ra,148(sp)
     bd4:	afbe0090 	sw	s8,144(sp)
     bd8:	03a0f025 	move	s8,sp
     bdc:	afbc0010 	sw	gp,16(sp)
     be0:	afc40098 	sw	a0,152(s8)
     be4:	afc5009c 	sw	a1,156(s8)
     be8:	afc600a0 	sw	a2,160(s8)

	int flag=0;
     bec:	afc00018 	sw	zero,24(s8)
	FILE* entrada;
	FILE* salida;

	if ((pipe == 0) || (pipe == 2)){
     bf0:	8fc200a0 	lw	v0,160(s8)
     bf4:	10400005 	beqz	v0,c0c <encode+0x4c>
     bf8:	00000000 	nop
     bfc:	8fc300a0 	lw	v1,160(s8)
     c00:	24020002 	li	v0,2
     c04:	14620011 	bne	v1,v0,c4c <encode+0x8c>
     c08:	00000000 	nop
		entrada = fopen(input,"r");
     c0c:	8f828030 	lw	v0,-32720(gp)
     c10:	24452650 	addiu	a1,v0,9808
     c14:	8fc40098 	lw	a0,152(s8)
     c18:	8f8280c8 	lw	v0,-32568(gp)
     c1c:	0040c825 	move	t9,v0
     c20:	0320f809 	jalr	t9
     c24:	00000000 	nop
     c28:	8fdc0010 	lw	gp,16(s8)
     c2c:	afc2001c 	sw	v0,28(s8)
		if (entrada == NULL) {
     c30:	8fc2001c 	lw	v0,28(s8)
     c34:	14400008 	bnez	v0,c58 <encode+0x98>
     c38:	00000000 	nop
			  flag=2;
     c3c:	24020002 	li	v0,2
     c40:	afc20018 	sw	v0,24(s8)
		if (entrada == NULL) {
     c44:	10000004 	b	c58 <encode+0x98>
     c48:	00000000 	nop
		}
	} else {
		entrada = stdin;
     c4c:	8f82808c 	lw	v0,-32628(gp)
     c50:	8c420000 	lw	v0,0(v0)
     c54:	afc2001c 	sw	v0,28(s8)
	}
	if ((pipe == 0) || (pipe == 1)) {
     c58:	8fc200a0 	lw	v0,160(s8)
     c5c:	10400005 	beqz	v0,c74 <encode+0xb4>
     c60:	00000000 	nop
     c64:	8fc300a0 	lw	v1,160(s8)
     c68:	24020001 	li	v0,1
     c6c:	14620011 	bne	v1,v0,cb4 <encode+0xf4>
     c70:	00000000 	nop
		salida = fopen(output,"w");
     c74:	8f828030 	lw	v0,-32720(gp)
     c78:	24452654 	addiu	a1,v0,9812
     c7c:	8fc4009c 	lw	a0,156(s8)
     c80:	8f8280c8 	lw	v0,-32568(gp)
     c84:	0040c825 	move	t9,v0
     c88:	0320f809 	jalr	t9
     c8c:	00000000 	nop
     c90:	8fdc0010 	lw	gp,16(s8)
     c94:	afc20020 	sw	v0,32(s8)
		if (salida == NULL) {
     c98:	8fc20020 	lw	v0,32(s8)
     c9c:	14400008 	bnez	v0,cc0 <encode+0x100>
     ca0:	00000000 	nop
			flag=3;
     ca4:	24020003 	li	v0,3
     ca8:	afc20018 	sw	v0,24(s8)
		if (salida == NULL) {
     cac:	10000004 	b	cc0 <encode+0x100>
     cb0:	00000000 	nop
		}
	} else {
		salida = stdout;
     cb4:	8f828084 	lw	v0,-32636(gp)
     cb8:	8c420000 	lw	v0,0(v0)
     cbc:	afc20020 	sw	v0,32(s8)
	}

	if (flag == 0){
     cc0:	8fc20018 	lw	v0,24(s8)
     cc4:	1440014c 	bnez	v0,11f8 <encode+0x638>
     cc8:	00000000 	nop
		char c;
		char cero = '0';
     ccc:	24020030 	li	v0,48
     cd0:	a3c2006c 	sb	v0,108(s8)
		char igual = '=';
     cd4:	2402003d 	li	v0,61
     cd8:	a3c2003c 	sb	v0,60(s8)
		int decimalAscii,multiplo6,cerosAagregar,caracteresEnBase64,posicionEnCadenaDeBits,decimalBase64,multiplo4,igualesAagregar,bits;
		char* caracterActualBinario = (char*)calloc(ENCODER_BITS,sizeof(char));
     cdc:	24050001 	li	a1,1
     ce0:	24040008 	li	a0,8
     ce4:	8f828070 	lw	v0,-32656(gp)
     ce8:	0040c825 	move	t9,v0
     cec:	0320f809 	jalr	t9
     cf0:	00000000 	nop
     cf4:	8fdc0010 	lw	gp,16(s8)
     cf8:	afc20040 	sw	v0,64(s8)
		char* cadenaDeBits = (char*)calloc(ENCODER_BITS,sizeof(char));
     cfc:	24050001 	li	a1,1
     d00:	24040008 	li	a0,8
     d04:	8f828070 	lw	v0,-32656(gp)
     d08:	0040c825 	move	t9,v0
     d0c:	0320f809 	jalr	t9
     d10:	00000000 	nop
     d14:	8fdc0010 	lw	gp,16(s8)
     d18:	afc20028 	sw	v0,40(s8)
		char* temporal;
		char* cadenaAcodificar[DECODER_BITS+1];

		if (!feof(entrada)){
     d1c:	8fc4001c 	lw	a0,28(s8)
     d20:	8f82809c 	lw	v0,-32612(gp)
     d24:	0040c825 	move	t9,v0
     d28:	0320f809 	jalr	t9
     d2c:	00000000 	nop
     d30:	8fdc0010 	lw	gp,16(s8)
     d34:	14400108 	bnez	v0,1158 <encode+0x598>
     d38:	00000000 	nop
			c=fgetc(entrada); //traducir-->sobreescribir c
     d3c:	8fc4001c 	lw	a0,28(s8)
     d40:	8f828088 	lw	v0,-32632(gp)
     d44:	0040c825 	move	t9,v0
     d48:	0320f809 	jalr	t9
     d4c:	00000000 	nop
     d50:	8fdc0010 	lw	gp,16(s8)
     d54:	a3c20024 	sb	v0,36(s8)
			if (c != EAGAIN){
     d58:	83c30024 	lb	v1,36(s8)
     d5c:	2402000b 	li	v0,11
     d60:	10620054 	beq	v1,v0,eb4 <encode+0x2f4>
     d64:	00000000 	nop
				decimalAscii=c;
     d68:	83c20024 	lb	v0,36(s8)
     d6c:	afc20044 	sw	v0,68(s8)
				decimalAbinario(cadenaDeBits,ENCODER_BITS,decimalAscii);
     d70:	8fc60044 	lw	a2,68(s8)
     d74:	24050008 	li	a1,8
     d78:	8fc40028 	lw	a0,40(s8)
     d7c:	8f828034 	lw	v0,-32716(gp)
     d80:	0040c825 	move	t9,v0
     d84:	041102d2 	bal	18d0 <decimalAbinario>
     d88:	00000000 	nop
     d8c:	8fdc0010 	lw	gp,16(s8)

				c=fgetc(entrada);
     d90:	8fc4001c 	lw	a0,28(s8)
     d94:	8f828088 	lw	v0,-32632(gp)
     d98:	0040c825 	move	t9,v0
     d9c:	0320f809 	jalr	t9
     da0:	00000000 	nop
     da4:	8fdc0010 	lw	gp,16(s8)
     da8:	a3c20024 	sb	v0,36(s8)
				while(!feof(entrada)){
     dac:	10000037 	b	e8c <encode+0x2cc>
     db0:	00000000 	nop
					decimalAscii=c;
     db4:	83c20024 	lb	v0,36(s8)
     db8:	afc20044 	sw	v0,68(s8)
					decimalAbinario(caracterActualBinario,ENCODER_BITS,decimalAscii);
     dbc:	8fc60044 	lw	a2,68(s8)
     dc0:	24050008 	li	a1,8
     dc4:	8fc40040 	lw	a0,64(s8)
     dc8:	8f828034 	lw	v0,-32716(gp)
     dcc:	0040c825 	move	t9,v0
     dd0:	041102bf 	bal	18d0 <decimalAbinario>
     dd4:	00000000 	nop
     dd8:	8fdc0010 	lw	gp,16(s8)

					temporal= concatenar(cadenaDeBits,caracterActualBinario);
     ddc:	8fc50040 	lw	a1,64(s8)
     de0:	8fc40028 	lw	a0,40(s8)
     de4:	8f828038 	lw	v0,-32712(gp)
     de8:	0040c825 	move	t9,v0
     dec:	041102fc 	bal	19e0 <concatenar>
     df0:	00000000 	nop
     df4:	8fdc0010 	lw	gp,16(s8)
     df8:	afc20048 	sw	v0,72(s8)
					cadenaDeBits = (char *) realloc(cadenaDeBits, strlen(temporal) + 1);
     dfc:	8fc40048 	lw	a0,72(s8)
     e00:	8f828098 	lw	v0,-32616(gp)
     e04:	0040c825 	move	t9,v0
     e08:	0320f809 	jalr	t9
     e0c:	00000000 	nop
     e10:	8fdc0010 	lw	gp,16(s8)
     e14:	24420001 	addiu	v0,v0,1
     e18:	00402825 	move	a1,v0
     e1c:	8fc40028 	lw	a0,40(s8)
     e20:	8f8280ac 	lw	v0,-32596(gp)
     e24:	0040c825 	move	t9,v0
     e28:	0320f809 	jalr	t9
     e2c:	00000000 	nop
     e30:	8fdc0010 	lw	gp,16(s8)
     e34:	afc20028 	sw	v0,40(s8)
					strcpy(cadenaDeBits, temporal);
     e38:	8fc50048 	lw	a1,72(s8)
     e3c:	8fc40028 	lw	a0,40(s8)
     e40:	8f8280b0 	lw	v0,-32592(gp)
     e44:	0040c825 	move	t9,v0
     e48:	0320f809 	jalr	t9
     e4c:	00000000 	nop
     e50:	8fdc0010 	lw	gp,16(s8)
					free(temporal);
     e54:	8fc40048 	lw	a0,72(s8)
     e58:	8f8280c0 	lw	v0,-32576(gp)
     e5c:	0040c825 	move	t9,v0
     e60:	0320f809 	jalr	t9
     e64:	00000000 	nop
     e68:	8fdc0010 	lw	gp,16(s8)
					temporal=NULL;
     e6c:	afc00048 	sw	zero,72(s8)

					c=fgetc(entrada);
     e70:	8fc4001c 	lw	a0,28(s8)
     e74:	8f828088 	lw	v0,-32632(gp)
     e78:	0040c825 	move	t9,v0
     e7c:	0320f809 	jalr	t9
     e80:	00000000 	nop
     e84:	8fdc0010 	lw	gp,16(s8)
     e88:	a3c20024 	sb	v0,36(s8)
				while(!feof(entrada)){
     e8c:	8fc4001c 	lw	a0,28(s8)
     e90:	8f82809c 	lw	v0,-32612(gp)
     e94:	0040c825 	move	t9,v0
     e98:	0320f809 	jalr	t9
     e9c:	00000000 	nop
     ea0:	8fdc0010 	lw	gp,16(s8)
     ea4:	1040ffc3 	beqz	v0,db4 <encode+0x1f4>
     ea8:	00000000 	nop
     eac:	10000003 	b	ebc <encode+0x2fc>
     eb0:	00000000 	nop
				}
			} else {
				flag=-1;
     eb4:	2402ffff 	li	v0,-1
     eb8:	afc20018 	sw	v0,24(s8)
			}
			if (flag!=-1) {
     ebc:	8fc30018 	lw	v1,24(s8)
     ec0:	2402ffff 	li	v0,-1
     ec4:	106200a4 	beq	v1,v0,1158 <encode+0x598>
     ec8:	00000000 	nop
				bits=strlen(cadenaDeBits);
     ecc:	8fc40028 	lw	a0,40(s8)
     ed0:	8f828098 	lw	v0,-32616(gp)
     ed4:	0040c825 	move	t9,v0
     ed8:	0320f809 	jalr	t9
     edc:	00000000 	nop
     ee0:	8fdc0010 	lw	gp,16(s8)
     ee4:	afc2004c 	sw	v0,76(s8)
				multiplo6=bits%DECODER_BITS;
     ee8:	8fc3004c 	lw	v1,76(s8)
     eec:	3c022aaa 	lui	v0,0x2aaa
     ef0:	3442aaab 	ori	v0,v0,0xaaab
     ef4:	00620018 	mult	v1,v0
     ef8:	00002010 	mfhi	a0
     efc:	000317c3 	sra	v0,v1,0x1f
     f00:	00822023 	subu	a0,a0,v0
     f04:	00801025 	move	v0,a0
     f08:	00021040 	sll	v0,v0,0x1
     f0c:	00441021 	addu	v0,v0,a0
     f10:	00021040 	sll	v0,v0,0x1
     f14:	00621023 	subu	v0,v1,v0
     f18:	afc20050 	sw	v0,80(s8)
				if(multiplo6!=0){
     f1c:	8fc20050 	lw	v0,80(s8)
     f20:	10400019 	beqz	v0,f88 <encode+0x3c8>
     f24:	00000000 	nop
					cerosAagregar=DECODER_BITS-multiplo6;
     f28:	24030006 	li	v1,6
     f2c:	8fc20050 	lw	v0,80(s8)
     f30:	00621023 	subu	v0,v1,v0
     f34:	afc20054 	sw	v0,84(s8)
					for (int i=0; i<cerosAagregar; i++){
     f38:	afc0002c 	sw	zero,44(s8)
     f3c:	1000000d 	b	f74 <encode+0x3b4>
     f40:	00000000 	nop
							strncat(cadenaDeBits, &cero,1);
     f44:	27c2006c 	addiu	v0,s8,108
     f48:	24060001 	li	a2,1
     f4c:	00402825 	move	a1,v0
     f50:	8fc40028 	lw	a0,40(s8)
     f54:	8f82806c 	lw	v0,-32660(gp)
     f58:	0040c825 	move	t9,v0
     f5c:	0320f809 	jalr	t9
     f60:	00000000 	nop
     f64:	8fdc0010 	lw	gp,16(s8)
					for (int i=0; i<cerosAagregar; i++){
     f68:	8fc2002c 	lw	v0,44(s8)
     f6c:	24420001 	addiu	v0,v0,1
     f70:	afc2002c 	sw	v0,44(s8)
     f74:	8fc3002c 	lw	v1,44(s8)
     f78:	8fc20054 	lw	v0,84(s8)
     f7c:	0062102a 	slt	v0,v1,v0
     f80:	1440fff0 	bnez	v0,f44 <encode+0x384>
     f84:	00000000 	nop
					}
				}
				bits=strlen(cadenaDeBits);
     f88:	8fc40028 	lw	a0,40(s8)
     f8c:	8f828098 	lw	v0,-32616(gp)
     f90:	0040c825 	move	t9,v0
     f94:	0320f809 	jalr	t9
     f98:	00000000 	nop
     f9c:	8fdc0010 	lw	gp,16(s8)
     fa0:	afc2004c 	sw	v0,76(s8)
				caracteresEnBase64=bits/DECODER_BITS;
     fa4:	8fc2004c 	lw	v0,76(s8)
     fa8:	3c032aaa 	lui	v1,0x2aaa
     fac:	3463aaab 	ori	v1,v1,0xaaab
     fb0:	00430018 	mult	v0,v1
     fb4:	00001810 	mfhi	v1
     fb8:	000217c3 	sra	v0,v0,0x1f
     fbc:	00621023 	subu	v0,v1,v0
     fc0:	afc20058 	sw	v0,88(s8)
				multiplo4=caracteresEnBase64%4;
     fc4:	8fc30058 	lw	v1,88(s8)
     fc8:	3c028000 	lui	v0,0x8000
     fcc:	34420003 	ori	v0,v0,0x3
     fd0:	00621024 	and	v0,v1,v0
     fd4:	04410005 	bgez	v0,fec <encode+0x42c>
     fd8:	00000000 	nop
     fdc:	2442ffff 	addiu	v0,v0,-1
     fe0:	2403fffc 	li	v1,-4
     fe4:	00431025 	or	v0,v0,v1
     fe8:	24420001 	addiu	v0,v0,1
     fec:	afc2005c 	sw	v0,92(s8)
				posicionEnCadenaDeBits=0;
     ff0:	afc00060 	sw	zero,96(s8)

				for(int i=0; i<caracteresEnBase64; i++){
     ff4:	afc00030 	sw	zero,48(s8)
     ff8:	10000038 	b	10dc <encode+0x51c>
     ffc:	00000000 	nop
					for (int j=0;j<DECODER_BITS;j++){
    1000:	afc00034 	sw	zero,52(s8)
    1004:	10000015 	b	105c <encode+0x49c>
    1008:	00000000 	nop
							posicionEnCadenaDeBits=i*DECODER_BITS+j;
    100c:	8fc30030 	lw	v1,48(s8)
    1010:	00601025 	move	v0,v1
    1014:	00021040 	sll	v0,v0,0x1
    1018:	00431021 	addu	v0,v0,v1
    101c:	00021040 	sll	v0,v0,0x1
    1020:	00401825 	move	v1,v0
    1024:	8fc20034 	lw	v0,52(s8)
    1028:	00621021 	addu	v0,v1,v0
    102c:	afc20060 	sw	v0,96(s8)
							cadenaAcodificar[j]=&(cadenaDeBits[posicionEnCadenaDeBits]);
    1030:	8fc20060 	lw	v0,96(s8)
    1034:	8fc30028 	lw	v1,40(s8)
    1038:	00621821 	addu	v1,v1,v0
    103c:	8fc20034 	lw	v0,52(s8)
    1040:	00021080 	sll	v0,v0,0x2
    1044:	27c40018 	addiu	a0,s8,24
    1048:	00821021 	addu	v0,a0,v0
    104c:	ac430058 	sw	v1,88(v0)
					for (int j=0;j<DECODER_BITS;j++){
    1050:	8fc20034 	lw	v0,52(s8)
    1054:	24420001 	addiu	v0,v0,1
    1058:	afc20034 	sw	v0,52(s8)
    105c:	8fc20034 	lw	v0,52(s8)
    1060:	28420006 	slti	v0,v0,6
    1064:	1440ffe9 	bnez	v0,100c <encode+0x44c>
    1068:	00000000 	nop
					}
					cadenaAcodificar[DECODER_BITS]='\0';
    106c:	afc00088 	sw	zero,136(s8)
					decimalBase64=binarioAdecimal(cadenaAcodificar,DECODER_BITS);
    1070:	27c20070 	addiu	v0,s8,112
    1074:	24050006 	li	a1,6
    1078:	00402025 	move	a0,v0
    107c:	8f82803c 	lw	v0,-32708(gp)
    1080:	0040c825 	move	t9,v0
    1084:	041101e2 	bal	1810 <binarioAdecimal>
    1088:	00000000 	nop
    108c:	8fdc0010 	lw	gp,16(s8)
    1090:	afc20064 	sw	v0,100(s8)
					c=caracter64equivalente(decimalBase64);
    1094:	8fc40064 	lw	a0,100(s8)
    1098:	8f828040 	lw	v0,-32704(gp)
    109c:	0040c825 	move	t9,v0
    10a0:	04110287 	bal	1ac0 <caracter64equivalente>
    10a4:	00000000 	nop
    10a8:	8fdc0010 	lw	gp,16(s8)
    10ac:	a3c20024 	sb	v0,36(s8)
					fputc(c,salida);
    10b0:	83c20024 	lb	v0,36(s8)
    10b4:	8fc50020 	lw	a1,32(s8)
    10b8:	00402025 	move	a0,v0
    10bc:	8f828080 	lw	v0,-32640(gp)
    10c0:	0040c825 	move	t9,v0
    10c4:	0320f809 	jalr	t9
    10c8:	00000000 	nop
    10cc:	8fdc0010 	lw	gp,16(s8)
				for(int i=0; i<caracteresEnBase64; i++){
    10d0:	8fc20030 	lw	v0,48(s8)
    10d4:	24420001 	addiu	v0,v0,1
    10d8:	afc20030 	sw	v0,48(s8)
    10dc:	8fc30030 	lw	v1,48(s8)
    10e0:	8fc20058 	lw	v0,88(s8)
    10e4:	0062102a 	slt	v0,v1,v0
    10e8:	1440ffc5 	bnez	v0,1000 <encode+0x440>
    10ec:	00000000 	nop
				}

				if (multiplo4!=0){
    10f0:	8fc2005c 	lw	v0,92(s8)
    10f4:	10400018 	beqz	v0,1158 <encode+0x598>
    10f8:	00000000 	nop
					igualesAagregar=4-multiplo4;
    10fc:	24030004 	li	v1,4
    1100:	8fc2005c 	lw	v0,92(s8)
    1104:	00621023 	subu	v0,v1,v0
    1108:	afc20068 	sw	v0,104(s8)
					for (int i=0; i<igualesAagregar; i++){
    110c:	afc00038 	sw	zero,56(s8)
    1110:	1000000c 	b	1144 <encode+0x584>
    1114:	00000000 	nop
						fputc(igual,salida);
    1118:	83c2003c 	lb	v0,60(s8)
    111c:	8fc50020 	lw	a1,32(s8)
    1120:	00402025 	move	a0,v0
    1124:	8f828080 	lw	v0,-32640(gp)
    1128:	0040c825 	move	t9,v0
    112c:	0320f809 	jalr	t9
    1130:	00000000 	nop
    1134:	8fdc0010 	lw	gp,16(s8)
					for (int i=0; i<igualesAagregar; i++){
    1138:	8fc20038 	lw	v0,56(s8)
    113c:	24420001 	addiu	v0,v0,1
    1140:	afc20038 	sw	v0,56(s8)
    1144:	8fc30038 	lw	v1,56(s8)
    1148:	8fc20068 	lw	v0,104(s8)
    114c:	0062102a 	slt	v0,v1,v0
    1150:	1440fff1 	bnez	v0,1118 <encode+0x558>
    1154:	00000000 	nop
					}
				}
			}
		}

		if ((pipe == 0) || (pipe == 2)){
    1158:	8fc200a0 	lw	v0,160(s8)
    115c:	10400005 	beqz	v0,1174 <encode+0x5b4>
    1160:	00000000 	nop
    1164:	8fc300a0 	lw	v1,160(s8)
    1168:	24020002 	li	v0,2
    116c:	14620007 	bne	v1,v0,118c <encode+0x5cc>
    1170:	00000000 	nop
			fclose(entrada);
    1174:	8fc4001c 	lw	a0,28(s8)
    1178:	8f828078 	lw	v0,-32648(gp)
    117c:	0040c825 	move	t9,v0
    1180:	0320f809 	jalr	t9
    1184:	00000000 	nop
    1188:	8fdc0010 	lw	gp,16(s8)
		}
		if ((pipe == 0) || (pipe == 1)) {
    118c:	8fc200a0 	lw	v0,160(s8)
    1190:	10400005 	beqz	v0,11a8 <encode+0x5e8>
    1194:	00000000 	nop
    1198:	8fc300a0 	lw	v1,160(s8)
    119c:	24020001 	li	v0,1
    11a0:	14620007 	bne	v1,v0,11c0 <encode+0x600>
    11a4:	00000000 	nop
			fclose(salida);
    11a8:	8fc40020 	lw	a0,32(s8)
    11ac:	8f828078 	lw	v0,-32648(gp)
    11b0:	0040c825 	move	t9,v0
    11b4:	0320f809 	jalr	t9
    11b8:	00000000 	nop
    11bc:	8fdc0010 	lw	gp,16(s8)
		}

		free(caracterActualBinario);
    11c0:	8fc40040 	lw	a0,64(s8)
    11c4:	8f8280c0 	lw	v0,-32576(gp)
    11c8:	0040c825 	move	t9,v0
    11cc:	0320f809 	jalr	t9
    11d0:	00000000 	nop
    11d4:	8fdc0010 	lw	gp,16(s8)
		caracterActualBinario=NULL;
    11d8:	afc00040 	sw	zero,64(s8)
		free(cadenaDeBits);
    11dc:	8fc40028 	lw	a0,40(s8)
    11e0:	8f8280c0 	lw	v0,-32576(gp)
    11e4:	0040c825 	move	t9,v0
    11e8:	0320f809 	jalr	t9
    11ec:	00000000 	nop
    11f0:	8fdc0010 	lw	gp,16(s8)
		cadenaDeBits=NULL;
    11f4:	afc00028 	sw	zero,40(s8)
	}
	return flag;
    11f8:	8fc20018 	lw	v0,24(s8)
}
    11fc:	03c0e825 	move	sp,s8
    1200:	8fbf0094 	lw	ra,148(sp)
    1204:	8fbe0090 	lw	s8,144(sp)
    1208:	27bd0098 	addiu	sp,sp,152
    120c:	03e00008 	jr	ra
    1210:	00000000 	nop
	...

00001220 <decode>:
 *  Created on: 18 oct. 2020
 *      Author: german
 */
#include "conversor.h"

int decode (char* input, char*output, int pipe){
    1220:	3c1c0002 	lui	gp,0x2
    1224:	279c97b0 	addiu	gp,gp,-26704
    1228:	0399e021 	addu	gp,gp,t9
    122c:	27bdff78 	addiu	sp,sp,-136
    1230:	afbf0084 	sw	ra,132(sp)
    1234:	afbe0080 	sw	s8,128(sp)
    1238:	03a0f025 	move	s8,sp
    123c:	afbc0010 	sw	gp,16(sp)
    1240:	afc40088 	sw	a0,136(s8)
    1244:	afc5008c 	sw	a1,140(s8)
    1248:	afc60090 	sw	a2,144(s8)

	int flag=0;
    124c:	afc00018 	sw	zero,24(s8)
	FILE* entrada;
	FILE* salida;

	if ((pipe == 0) || (pipe == 2)){
    1250:	8fc20090 	lw	v0,144(s8)
    1254:	10400005 	beqz	v0,126c <decode+0x4c>
    1258:	00000000 	nop
    125c:	8fc30090 	lw	v1,144(s8)
    1260:	24020002 	li	v0,2
    1264:	14620011 	bne	v1,v0,12ac <decode+0x8c>
    1268:	00000000 	nop
		entrada = fopen(input,"r");
    126c:	8f828030 	lw	v0,-32720(gp)
    1270:	24452660 	addiu	a1,v0,9824
    1274:	8fc40088 	lw	a0,136(s8)
    1278:	8f8280c8 	lw	v0,-32568(gp)
    127c:	0040c825 	move	t9,v0
    1280:	0320f809 	jalr	t9
    1284:	00000000 	nop
    1288:	8fdc0010 	lw	gp,16(s8)
    128c:	afc2001c 	sw	v0,28(s8)
		if (entrada == NULL) {
    1290:	8fc2001c 	lw	v0,28(s8)
    1294:	14400008 	bnez	v0,12b8 <decode+0x98>
    1298:	00000000 	nop
			  flag=2;
    129c:	24020002 	li	v0,2
    12a0:	afc20018 	sw	v0,24(s8)
		if (entrada == NULL) {
    12a4:	10000004 	b	12b8 <decode+0x98>
    12a8:	00000000 	nop
		}
	} else {
		entrada = stdin;
    12ac:	8f82808c 	lw	v0,-32628(gp)
    12b0:	8c420000 	lw	v0,0(v0)
    12b4:	afc2001c 	sw	v0,28(s8)
	}
	if ((pipe == 0) || (pipe == 1)) {
    12b8:	8fc20090 	lw	v0,144(s8)
    12bc:	10400005 	beqz	v0,12d4 <decode+0xb4>
    12c0:	00000000 	nop
    12c4:	8fc30090 	lw	v1,144(s8)
    12c8:	24020001 	li	v0,1
    12cc:	14620011 	bne	v1,v0,1314 <decode+0xf4>
    12d0:	00000000 	nop
		salida = fopen(output,"w");
    12d4:	8f828030 	lw	v0,-32720(gp)
    12d8:	24452664 	addiu	a1,v0,9828
    12dc:	8fc4008c 	lw	a0,140(s8)
    12e0:	8f8280c8 	lw	v0,-32568(gp)
    12e4:	0040c825 	move	t9,v0
    12e8:	0320f809 	jalr	t9
    12ec:	00000000 	nop
    12f0:	8fdc0010 	lw	gp,16(s8)
    12f4:	afc20020 	sw	v0,32(s8)
		if (salida == NULL) {
    12f8:	8fc20020 	lw	v0,32(s8)
    12fc:	14400008 	bnez	v0,1320 <decode+0x100>
    1300:	00000000 	nop
			flag=3;
    1304:	24020003 	li	v0,3
    1308:	afc20018 	sw	v0,24(s8)
		if (salida == NULL) {
    130c:	10000004 	b	1320 <decode+0x100>
    1310:	00000000 	nop
		}
	} else {
		salida = stdout;
    1314:	8f828084 	lw	v0,-32636(gp)
    1318:	8c420000 	lw	v0,0(v0)
    131c:	afc20020 	sw	v0,32(s8)
	}

	if (flag == 0){
    1320:	8fc20018 	lw	v0,24(s8)
    1324:	14400132 	bnez	v0,17f0 <decode+0x5d0>
    1328:	00000000 	nop
	char c;
	int decimalBase64,bits,multiplo8,caracteresASCII,posicionEnCadenaDeBits,decimalAscii;

	char* caracterActualBinario = (char*)calloc(DECODER_BITS,sizeof(char));
    132c:	24050001 	li	a1,1
    1330:	24040006 	li	a0,6
    1334:	8f828070 	lw	v0,-32656(gp)
    1338:	0040c825 	move	t9,v0
    133c:	0320f809 	jalr	t9
    1340:	00000000 	nop
    1344:	8fdc0010 	lw	gp,16(s8)
    1348:	afc20038 	sw	v0,56(s8)
	char* cadenaDeBits = (char*)calloc(DECODER_BITS,sizeof(char));
    134c:	24050001 	li	a1,1
    1350:	24040006 	li	a0,6
    1354:	8f828070 	lw	v0,-32656(gp)
    1358:	0040c825 	move	t9,v0
    135c:	0320f809 	jalr	t9
    1360:	00000000 	nop
    1364:	8fdc0010 	lw	gp,16(s8)
    1368:	afc20028 	sw	v0,40(s8)
	char* temporal;
	char* cadenaAcodificar[ENCODER_BITS+1];

	if (!feof(entrada)){
    136c:	8fc4001c 	lw	a0,28(s8)
    1370:	8f82809c 	lw	v0,-32612(gp)
    1374:	0040c825 	move	t9,v0
    1378:	0320f809 	jalr	t9
    137c:	00000000 	nop
    1380:	8fdc0010 	lw	gp,16(s8)
    1384:	144000f2 	bnez	v0,1750 <decode+0x530>
    1388:	00000000 	nop
		c=fgetc(entrada); //traducir-->sobreescribir c
    138c:	8fc4001c 	lw	a0,28(s8)
    1390:	8f828088 	lw	v0,-32632(gp)
    1394:	0040c825 	move	t9,v0
    1398:	0320f809 	jalr	t9
    139c:	00000000 	nop
    13a0:	8fdc0010 	lw	gp,16(s8)
    13a4:	a3c20024 	sb	v0,36(s8)
		decimalBase64 = valorBase64Equivalente(c);
    13a8:	83c20024 	lb	v0,36(s8)
    13ac:	00402025 	move	a0,v0
    13b0:	8f828044 	lw	v0,-32700(gp)
    13b4:	0040c825 	move	t9,v0
    13b8:	041101e9 	bal	1b60 <valorBase64Equivalente>
    13bc:	00000000 	nop
    13c0:	8fdc0010 	lw	gp,16(s8)
    13c4:	afc2003c 	sw	v0,60(s8)
		if(decimalBase64==-1){
    13c8:	8fc3003c 	lw	v1,60(s8)
    13cc:	2402ffff 	li	v0,-1
    13d0:	1462000d 	bne	v1,v0,1408 <decode+0x1e8>
    13d4:	00000000 	nop
			fprintf(stderr,"El texto ingresado no corresponde a la codificación en Base 64\n");
    13d8:	8f8280c4 	lw	v0,-32572(gp)
    13dc:	8c420000 	lw	v0,0(v0)
    13e0:	00403825 	move	a3,v0
    13e4:	24060040 	li	a2,64
    13e8:	24050001 	li	a1,1
    13ec:	8f828030 	lw	v0,-32720(gp)
    13f0:	24442668 	addiu	a0,v0,9832
    13f4:	8f8280b8 	lw	v0,-32584(gp)
    13f8:	0040c825 	move	t9,v0
    13fc:	0320f809 	jalr	t9
    1400:	00000000 	nop
    1404:	8fdc0010 	lw	gp,16(s8)
		}
		decimalAbinario(cadenaDeBits,DECODER_BITS,decimalBase64);
    1408:	8fc6003c 	lw	a2,60(s8)
    140c:	24050006 	li	a1,6
    1410:	8fc40028 	lw	a0,40(s8)
    1414:	8f828034 	lw	v0,-32716(gp)
    1418:	0040c825 	move	t9,v0
    141c:	0411012c 	bal	18d0 <decimalAbinario>
    1420:	00000000 	nop
    1424:	8fdc0010 	lw	gp,16(s8)

		c=fgetc(entrada);
    1428:	8fc4001c 	lw	a0,28(s8)
    142c:	8f828088 	lw	v0,-32632(gp)
    1430:	0040c825 	move	t9,v0
    1434:	0320f809 	jalr	t9
    1438:	00000000 	nop
    143c:	8fdc0010 	lw	gp,16(s8)
    1440:	a3c20024 	sb	v0,36(s8)
		while(!feof(entrada)){
    1444:	1000004b 	b	1574 <decode+0x354>
    1448:	00000000 	nop
			if(c != '='){ //Ignoro los pads
    144c:	83c30024 	lb	v1,36(s8)
    1450:	2402003d 	li	v0,61
    1454:	10620040 	beq	v1,v0,1558 <decode+0x338>
    1458:	00000000 	nop
				decimalBase64 = valorBase64Equivalente(c);
    145c:	83c20024 	lb	v0,36(s8)
    1460:	00402025 	move	a0,v0
    1464:	8f828044 	lw	v0,-32700(gp)
    1468:	0040c825 	move	t9,v0
    146c:	041101bc 	bal	1b60 <valorBase64Equivalente>
    1470:	00000000 	nop
    1474:	8fdc0010 	lw	gp,16(s8)
    1478:	afc2003c 	sw	v0,60(s8)
				if (decimalBase64!=-1){
    147c:	8fc3003c 	lw	v1,60(s8)
    1480:	2402ffff 	li	v0,-1
    1484:	10620030 	beq	v1,v0,1548 <decode+0x328>
    1488:	00000000 	nop
					decimalAbinario(caracterActualBinario,DECODER_BITS,decimalBase64);
    148c:	8fc6003c 	lw	a2,60(s8)
    1490:	24050006 	li	a1,6
    1494:	8fc40038 	lw	a0,56(s8)
    1498:	8f828034 	lw	v0,-32716(gp)
    149c:	0040c825 	move	t9,v0
    14a0:	0411010b 	bal	18d0 <decimalAbinario>
    14a4:	00000000 	nop
    14a8:	8fdc0010 	lw	gp,16(s8)

						temporal= concatenar(cadenaDeBits,caracterActualBinario);
    14ac:	8fc50038 	lw	a1,56(s8)
    14b0:	8fc40028 	lw	a0,40(s8)
    14b4:	8f828038 	lw	v0,-32712(gp)
    14b8:	0040c825 	move	t9,v0
    14bc:	04110148 	bal	19e0 <concatenar>
    14c0:	00000000 	nop
    14c4:	8fdc0010 	lw	gp,16(s8)
    14c8:	afc20040 	sw	v0,64(s8)
						cadenaDeBits = (char *) realloc(cadenaDeBits, strlen(temporal) + 1);
    14cc:	8fc40040 	lw	a0,64(s8)
    14d0:	8f828098 	lw	v0,-32616(gp)
    14d4:	0040c825 	move	t9,v0
    14d8:	0320f809 	jalr	t9
    14dc:	00000000 	nop
    14e0:	8fdc0010 	lw	gp,16(s8)
    14e4:	24420001 	addiu	v0,v0,1
    14e8:	00402825 	move	a1,v0
    14ec:	8fc40028 	lw	a0,40(s8)
    14f0:	8f8280ac 	lw	v0,-32596(gp)
    14f4:	0040c825 	move	t9,v0
    14f8:	0320f809 	jalr	t9
    14fc:	00000000 	nop
    1500:	8fdc0010 	lw	gp,16(s8)
    1504:	afc20028 	sw	v0,40(s8)
						strcpy(cadenaDeBits, temporal);
    1508:	8fc50040 	lw	a1,64(s8)
    150c:	8fc40028 	lw	a0,40(s8)
    1510:	8f8280b0 	lw	v0,-32592(gp)
    1514:	0040c825 	move	t9,v0
    1518:	0320f809 	jalr	t9
    151c:	00000000 	nop
    1520:	8fdc0010 	lw	gp,16(s8)
						free(temporal);
    1524:	8fc40040 	lw	a0,64(s8)
    1528:	8f8280c0 	lw	v0,-32576(gp)
    152c:	0040c825 	move	t9,v0
    1530:	0320f809 	jalr	t9
    1534:	00000000 	nop
    1538:	8fdc0010 	lw	gp,16(s8)
						temporal=NULL;
    153c:	afc00040 	sw	zero,64(s8)
    1540:	10000005 	b	1558 <decode+0x338>
    1544:	00000000 	nop
				} else {
					flag=-1;
    1548:	2402ffff 	li	v0,-1
    154c:	afc20018 	sw	v0,24(s8)
					break;
    1550:	10000010 	b	1594 <decode+0x374>
    1554:	00000000 	nop
				}
			}
			c=fgetc(entrada);
    1558:	8fc4001c 	lw	a0,28(s8)
    155c:	8f828088 	lw	v0,-32632(gp)
    1560:	0040c825 	move	t9,v0
    1564:	0320f809 	jalr	t9
    1568:	00000000 	nop
    156c:	8fdc0010 	lw	gp,16(s8)
    1570:	a3c20024 	sb	v0,36(s8)
		while(!feof(entrada)){
    1574:	8fc4001c 	lw	a0,28(s8)
    1578:	8f82809c 	lw	v0,-32612(gp)
    157c:	0040c825 	move	t9,v0
    1580:	0320f809 	jalr	t9
    1584:	00000000 	nop
    1588:	8fdc0010 	lw	gp,16(s8)
    158c:	1040ffaf 	beqz	v0,144c <decode+0x22c>
    1590:	00000000 	nop
		}
		if (flag != -1){
    1594:	8fc30018 	lw	v1,24(s8)
    1598:	2402ffff 	li	v0,-1
    159c:	1062006c 	beq	v1,v0,1750 <decode+0x530>
    15a0:	00000000 	nop
			bits=strlen(cadenaDeBits);
    15a4:	8fc40028 	lw	a0,40(s8)
    15a8:	8f828098 	lw	v0,-32616(gp)
    15ac:	0040c825 	move	t9,v0
    15b0:	0320f809 	jalr	t9
    15b4:	00000000 	nop
    15b8:	8fdc0010 	lw	gp,16(s8)
    15bc:	afc20044 	sw	v0,68(s8)
			multiplo8=bits%ENCODER_BITS;
    15c0:	8fc30044 	lw	v1,68(s8)
    15c4:	3c028000 	lui	v0,0x8000
    15c8:	34420007 	ori	v0,v0,0x7
    15cc:	00621024 	and	v0,v1,v0
    15d0:	04410005 	bgez	v0,15e8 <decode+0x3c8>
    15d4:	00000000 	nop
    15d8:	2442ffff 	addiu	v0,v0,-1
    15dc:	2403fff8 	li	v1,-8
    15e0:	00431025 	or	v0,v0,v1
    15e4:	24420001 	addiu	v0,v0,1
    15e8:	afc20048 	sw	v0,72(s8)
			if(multiplo8 != 0){
    15ec:	8fc20048 	lw	v0,72(s8)
    15f0:	10400013 	beqz	v0,1640 <decode+0x420>
    15f4:	00000000 	nop
				for (int i=0; i<multiplo8; i++){
    15f8:	afc0002c 	sw	zero,44(s8)
    15fc:	1000000b 	b	162c <decode+0x40c>
    1600:	00000000 	nop
					cadenaDeBits[bits-i]='\0';
    1604:	8fc30044 	lw	v1,68(s8)
    1608:	8fc2002c 	lw	v0,44(s8)
    160c:	00621023 	subu	v0,v1,v0
    1610:	00401825 	move	v1,v0
    1614:	8fc20028 	lw	v0,40(s8)
    1618:	00431021 	addu	v0,v0,v1
    161c:	a0400000 	sb	zero,0(v0)
				for (int i=0; i<multiplo8; i++){
    1620:	8fc2002c 	lw	v0,44(s8)
    1624:	24420001 	addiu	v0,v0,1
    1628:	afc2002c 	sw	v0,44(s8)
    162c:	8fc3002c 	lw	v1,44(s8)
    1630:	8fc20048 	lw	v0,72(s8)
    1634:	0062102a 	slt	v0,v1,v0
    1638:	1440fff2 	bnez	v0,1604 <decode+0x3e4>
    163c:	00000000 	nop
				}
			}
			bits=strlen(cadenaDeBits);
    1640:	8fc40028 	lw	a0,40(s8)
    1644:	8f828098 	lw	v0,-32616(gp)
    1648:	0040c825 	move	t9,v0
    164c:	0320f809 	jalr	t9
    1650:	00000000 	nop
    1654:	8fdc0010 	lw	gp,16(s8)
    1658:	afc20044 	sw	v0,68(s8)
			caracteresASCII=bits/ENCODER_BITS;
    165c:	8fc20044 	lw	v0,68(s8)
    1660:	04410002 	bgez	v0,166c <decode+0x44c>
    1664:	00000000 	nop
    1668:	24420007 	addiu	v0,v0,7
    166c:	000210c3 	sra	v0,v0,0x3
    1670:	afc2004c 	sw	v0,76(s8)
			posicionEnCadenaDeBits=0;
    1674:	afc00050 	sw	zero,80(s8)

			for(int i=0; i<caracteresASCII; i++){
    1678:	afc00030 	sw	zero,48(s8)
    167c:	1000002f 	b	173c <decode+0x51c>
    1680:	00000000 	nop
				for (int j=0;j<ENCODER_BITS;j++){
    1684:	afc00034 	sw	zero,52(s8)
    1688:	10000011 	b	16d0 <decode+0x4b0>
    168c:	00000000 	nop
						posicionEnCadenaDeBits=i*ENCODER_BITS+j;
    1690:	8fc20030 	lw	v0,48(s8)
    1694:	000218c0 	sll	v1,v0,0x3
    1698:	8fc20034 	lw	v0,52(s8)
    169c:	00621021 	addu	v0,v1,v0
    16a0:	afc20050 	sw	v0,80(s8)
						cadenaAcodificar[j]=&(cadenaDeBits[posicionEnCadenaDeBits]);
    16a4:	8fc20050 	lw	v0,80(s8)
    16a8:	8fc30028 	lw	v1,40(s8)
    16ac:	00621821 	addu	v1,v1,v0
    16b0:	8fc20034 	lw	v0,52(s8)
    16b4:	00021080 	sll	v0,v0,0x2
    16b8:	27c40018 	addiu	a0,s8,24
    16bc:	00821021 	addu	v0,a0,v0
    16c0:	ac430040 	sw	v1,64(v0)
				for (int j=0;j<ENCODER_BITS;j++){
    16c4:	8fc20034 	lw	v0,52(s8)
    16c8:	24420001 	addiu	v0,v0,1
    16cc:	afc20034 	sw	v0,52(s8)
    16d0:	8fc20034 	lw	v0,52(s8)
    16d4:	28420008 	slti	v0,v0,8
    16d8:	1440ffed 	bnez	v0,1690 <decode+0x470>
    16dc:	00000000 	nop
				}
				cadenaAcodificar[ENCODER_BITS]='\0';
    16e0:	afc00078 	sw	zero,120(s8)
				decimalAscii=binarioAdecimal(cadenaAcodificar,ENCODER_BITS);
    16e4:	27c20058 	addiu	v0,s8,88
    16e8:	24050008 	li	a1,8
    16ec:	00402025 	move	a0,v0
    16f0:	8f82803c 	lw	v0,-32708(gp)
    16f4:	0040c825 	move	t9,v0
    16f8:	04110045 	bal	1810 <binarioAdecimal>
    16fc:	00000000 	nop
    1700:	8fdc0010 	lw	gp,16(s8)
    1704:	afc20054 	sw	v0,84(s8)
				c=decimalAscii;
    1708:	8fc20054 	lw	v0,84(s8)
    170c:	a3c20024 	sb	v0,36(s8)
				fputc(c,salida);
    1710:	83c20024 	lb	v0,36(s8)
    1714:	8fc50020 	lw	a1,32(s8)
    1718:	00402025 	move	a0,v0
    171c:	8f828080 	lw	v0,-32640(gp)
    1720:	0040c825 	move	t9,v0
    1724:	0320f809 	jalr	t9
    1728:	00000000 	nop
    172c:	8fdc0010 	lw	gp,16(s8)
			for(int i=0; i<caracteresASCII; i++){
    1730:	8fc20030 	lw	v0,48(s8)
    1734:	24420001 	addiu	v0,v0,1
    1738:	afc20030 	sw	v0,48(s8)
    173c:	8fc30030 	lw	v1,48(s8)
    1740:	8fc2004c 	lw	v0,76(s8)
    1744:	0062102a 	slt	v0,v1,v0
    1748:	1440ffce 	bnez	v0,1684 <decode+0x464>
    174c:	00000000 	nop
			}

		}
	}
	if ((pipe == 0) || (pipe == 2)){
    1750:	8fc20090 	lw	v0,144(s8)
    1754:	10400005 	beqz	v0,176c <decode+0x54c>
    1758:	00000000 	nop
    175c:	8fc30090 	lw	v1,144(s8)
    1760:	24020002 	li	v0,2
    1764:	14620007 	bne	v1,v0,1784 <decode+0x564>
    1768:	00000000 	nop
		fclose(entrada);
    176c:	8fc4001c 	lw	a0,28(s8)
    1770:	8f828078 	lw	v0,-32648(gp)
    1774:	0040c825 	move	t9,v0
    1778:	0320f809 	jalr	t9
    177c:	00000000 	nop
    1780:	8fdc0010 	lw	gp,16(s8)
	}
	if ((pipe == 0) || (pipe == 1)) {
    1784:	8fc20090 	lw	v0,144(s8)
    1788:	10400005 	beqz	v0,17a0 <decode+0x580>
    178c:	00000000 	nop
    1790:	8fc30090 	lw	v1,144(s8)
    1794:	24020001 	li	v0,1
    1798:	14620007 	bne	v1,v0,17b8 <decode+0x598>
    179c:	00000000 	nop
		fclose(salida);
    17a0:	8fc40020 	lw	a0,32(s8)
    17a4:	8f828078 	lw	v0,-32648(gp)
    17a8:	0040c825 	move	t9,v0
    17ac:	0320f809 	jalr	t9
    17b0:	00000000 	nop
    17b4:	8fdc0010 	lw	gp,16(s8)
	}

	free(caracterActualBinario);
    17b8:	8fc40038 	lw	a0,56(s8)
    17bc:	8f8280c0 	lw	v0,-32576(gp)
    17c0:	0040c825 	move	t9,v0
    17c4:	0320f809 	jalr	t9
    17c8:	00000000 	nop
    17cc:	8fdc0010 	lw	gp,16(s8)
	caracterActualBinario=NULL;
    17d0:	afc00038 	sw	zero,56(s8)
	free(cadenaDeBits);
    17d4:	8fc40028 	lw	a0,40(s8)
    17d8:	8f8280c0 	lw	v0,-32576(gp)
    17dc:	0040c825 	move	t9,v0
    17e0:	0320f809 	jalr	t9
    17e4:	00000000 	nop
    17e8:	8fdc0010 	lw	gp,16(s8)
	cadenaDeBits=NULL;
    17ec:	afc00028 	sw	zero,40(s8)
	}

	return flag;
    17f0:	8fc20018 	lw	v0,24(s8)
}
    17f4:	03c0e825 	move	sp,s8
    17f8:	8fbf0084 	lw	ra,132(sp)
    17fc:	8fbe0080 	lw	s8,128(sp)
    1800:	27bd0088 	addiu	sp,sp,136
    1804:	03e00008 	jr	ra
    1808:	00000000 	nop
    180c:	00000000 	nop

00001810 <binarioAdecimal>:
 *      Author: german
 */

#include "conversor.h"

int binarioAdecimal (char* cadena[],int largoDeLaCadena) {
    1810:	27bdffe0 	addiu	sp,sp,-32
    1814:	afbe001c 	sw	s8,28(sp)
    1818:	03a0f025 	move	s8,sp
    181c:	afc40020 	sw	a0,32(s8)
    1820:	afc50024 	sw	a1,36(s8)

	int decimal=0;
    1824:	afc00008 	sw	zero,8(s8)
	int potencia=1;
    1828:	24020001 	li	v0,1
    182c:	afc2000c 	sw	v0,12(s8)
	int peso;

	for(int i=largoDeLaCadena-1; i>-1; i--){
    1830:	8fc20024 	lw	v0,36(s8)
    1834:	2442ffff 	addiu	v0,v0,-1
    1838:	afc20014 	sw	v0,20(s8)
    183c:	1000001b 	b	18ac <binarioAdecimal+0x9c>
    1840:	00000000 	nop

		if (*cadena[i]=='1')
    1844:	8fc20014 	lw	v0,20(s8)
    1848:	00021080 	sll	v0,v0,0x2
    184c:	8fc30020 	lw	v1,32(s8)
    1850:	00621021 	addu	v0,v1,v0
    1854:	8c420000 	lw	v0,0(v0)
    1858:	80430000 	lb	v1,0(v0)
    185c:	24020031 	li	v0,49
    1860:	14620005 	bne	v1,v0,1878 <binarioAdecimal+0x68>
    1864:	00000000 	nop
			peso=1;
    1868:	24020001 	li	v0,1
    186c:	afc20010 	sw	v0,16(s8)
    1870:	10000002 	b	187c <binarioAdecimal+0x6c>
    1874:	00000000 	nop
		else
			peso=0;
    1878:	afc00010 	sw	zero,16(s8)

		decimal=decimal+peso*potencia;
    187c:	8fc30010 	lw	v1,16(s8)
    1880:	8fc2000c 	lw	v0,12(s8)
    1884:	70621002 	mul	v0,v1,v0
    1888:	8fc30008 	lw	v1,8(s8)
    188c:	00621021 	addu	v0,v1,v0
    1890:	afc20008 	sw	v0,8(s8)
		potencia=potencia*2;
    1894:	8fc2000c 	lw	v0,12(s8)
    1898:	00021040 	sll	v0,v0,0x1
    189c:	afc2000c 	sw	v0,12(s8)
	for(int i=largoDeLaCadena-1; i>-1; i--){
    18a0:	8fc20014 	lw	v0,20(s8)
    18a4:	2442ffff 	addiu	v0,v0,-1
    18a8:	afc20014 	sw	v0,20(s8)
    18ac:	8fc20014 	lw	v0,20(s8)
    18b0:	0441ffe4 	bgez	v0,1844 <binarioAdecimal+0x34>
    18b4:	00000000 	nop
	}

	return decimal;
    18b8:	8fc20008 	lw	v0,8(s8)
}
    18bc:	03c0e825 	move	sp,s8
    18c0:	8fbe001c 	lw	s8,28(sp)
    18c4:	27bd0020 	addiu	sp,sp,32
    18c8:	03e00008 	jr	ra
    18cc:	00000000 	nop

000018d0 <decimalAbinario>:
 *  Created on: 12 oct. 2020
 *      Author: german
 */
#include "conversor.h"

void decimalAbinario (char* cadena,int largoDeLaCadena, int decimalDeTabla) {
    18d0:	27bdffe0 	addiu	sp,sp,-32
    18d4:	afbe001c 	sw	s8,28(sp)
    18d8:	03a0f025 	move	s8,sp
    18dc:	afc40020 	sw	a0,32(s8)
    18e0:	afc50024 	sw	a1,36(s8)
    18e4:	afc60028 	sw	a2,40(s8)

	int decimal = decimalDeTabla;
    18e8:	8fc20028 	lw	v0,40(s8)
    18ec:	afc20008 	sw	v0,8(s8)

	for(int i=0; i<largoDeLaCadena; i++){
    18f0:	afc0000c 	sw	zero,12(s8)
    18f4:	10000009 	b	191c <decimalAbinario+0x4c>
    18f8:	00000000 	nop
		cadena[i] = '0';
    18fc:	8fc2000c 	lw	v0,12(s8)
    1900:	8fc30020 	lw	v1,32(s8)
    1904:	00621021 	addu	v0,v1,v0
    1908:	24030030 	li	v1,48
    190c:	a0430000 	sb	v1,0(v0)
	for(int i=0; i<largoDeLaCadena; i++){
    1910:	8fc2000c 	lw	v0,12(s8)
    1914:	24420001 	addiu	v0,v0,1
    1918:	afc2000c 	sw	v0,12(s8)
    191c:	8fc3000c 	lw	v1,12(s8)
    1920:	8fc20024 	lw	v0,36(s8)
    1924:	0062102a 	slt	v0,v1,v0
    1928:	1440fff4 	bnez	v0,18fc <decimalAbinario+0x2c>
    192c:	00000000 	nop
	}

	int contador = largoDeLaCadena;
    1930:	8fc20024 	lw	v0,36(s8)
    1934:	afc20010 	sw	v0,16(s8)
	cadena[contador]='\0';
    1938:	8fc20010 	lw	v0,16(s8)
    193c:	8fc30020 	lw	v1,32(s8)
    1940:	00621021 	addu	v0,v1,v0
    1944:	a0400000 	sb	zero,0(v0)

	while(decimal > 0){
    1948:	10000019 	b	19b0 <decimalAbinario+0xe0>
    194c:	00000000 	nop
		contador--;
    1950:	8fc20010 	lw	v0,16(s8)
    1954:	2442ffff 	addiu	v0,v0,-1
    1958:	afc20010 	sw	v0,16(s8)

		if(decimal%2 == 0)
    195c:	8fc20008 	lw	v0,8(s8)
    1960:	30420001 	andi	v0,v0,0x1
    1964:	14400008 	bnez	v0,1988 <decimalAbinario+0xb8>
    1968:	00000000 	nop
			cadena[contador] = '0';
    196c:	8fc20010 	lw	v0,16(s8)
    1970:	8fc30020 	lw	v1,32(s8)
    1974:	00621021 	addu	v0,v1,v0
    1978:	24030030 	li	v1,48
    197c:	a0430000 	sb	v1,0(v0)
    1980:	10000006 	b	199c <decimalAbinario+0xcc>
    1984:	00000000 	nop
		else
			cadena[contador] = '1';
    1988:	8fc20010 	lw	v0,16(s8)
    198c:	8fc30020 	lw	v1,32(s8)
    1990:	00621021 	addu	v0,v1,v0
    1994:	24030031 	li	v1,49
    1998:	a0430000 	sb	v1,0(v0)

		decimal = decimal/2;
    199c:	8fc20008 	lw	v0,8(s8)
    19a0:	00021fc2 	srl	v1,v0,0x1f
    19a4:	00621021 	addu	v0,v1,v0
    19a8:	00021043 	sra	v0,v0,0x1
    19ac:	afc20008 	sw	v0,8(s8)
	while(decimal > 0){
    19b0:	8fc20008 	lw	v0,8(s8)
    19b4:	1c40ffe6 	bgtz	v0,1950 <decimalAbinario+0x80>
    19b8:	00000000 	nop
	}


}
    19bc:	00000000 	nop
    19c0:	03c0e825 	move	sp,s8
    19c4:	8fbe001c 	lw	s8,28(sp)
    19c8:	27bd0020 	addiu	sp,sp,32
    19cc:	03e00008 	jr	ra
    19d0:	00000000 	nop
	...

000019e0 <concatenar>:
 *      Author: german
 *
 */
#include "conversor.h"

char* concatenar(char* cadena, char* binario) {
    19e0:	3c1c0002 	lui	gp,0x2
    19e4:	279c8ff0 	addiu	gp,gp,-28688
    19e8:	0399e021 	addu	gp,gp,t9
    19ec:	27bdffd0 	addiu	sp,sp,-48
    19f0:	afbf002c 	sw	ra,44(sp)
    19f4:	afbe0028 	sw	s8,40(sp)
    19f8:	afb00024 	sw	s0,36(sp)
    19fc:	03a0f025 	move	s8,sp
    1a00:	afbc0010 	sw	gp,16(sp)
    1a04:	afc40030 	sw	a0,48(s8)
    1a08:	afc50034 	sw	a1,52(s8)
	char* concatenado = malloc(strlen(cadena) + strlen(binario) + 1); // +1 para \0
    1a0c:	8fc40030 	lw	a0,48(s8)
    1a10:	8f828098 	lw	v0,-32616(gp)
    1a14:	0040c825 	move	t9,v0
    1a18:	0320f809 	jalr	t9
    1a1c:	00000000 	nop
    1a20:	8fdc0010 	lw	gp,16(s8)
    1a24:	00408025 	move	s0,v0
    1a28:	8fc40034 	lw	a0,52(s8)
    1a2c:	8f828098 	lw	v0,-32616(gp)
    1a30:	0040c825 	move	t9,v0
    1a34:	0320f809 	jalr	t9
    1a38:	00000000 	nop
    1a3c:	8fdc0010 	lw	gp,16(s8)
    1a40:	02021021 	addu	v0,s0,v0
    1a44:	24420001 	addiu	v0,v0,1
    1a48:	00402025 	move	a0,v0
    1a4c:	8f8280a8 	lw	v0,-32600(gp)
    1a50:	0040c825 	move	t9,v0
    1a54:	0320f809 	jalr	t9
    1a58:	00000000 	nop
    1a5c:	8fdc0010 	lw	gp,16(s8)
    1a60:	afc20018 	sw	v0,24(s8)
	    strcpy(concatenado, cadena);
    1a64:	8fc50030 	lw	a1,48(s8)
    1a68:	8fc40018 	lw	a0,24(s8)
    1a6c:	8f8280b0 	lw	v0,-32592(gp)
    1a70:	0040c825 	move	t9,v0
    1a74:	0320f809 	jalr	t9
    1a78:	00000000 	nop
    1a7c:	8fdc0010 	lw	gp,16(s8)
	    strcat(concatenado, binario);
    1a80:	8fc50034 	lw	a1,52(s8)
    1a84:	8fc40018 	lw	a0,24(s8)
    1a88:	8f8280b4 	lw	v0,-32588(gp)
    1a8c:	0040c825 	move	t9,v0
    1a90:	0320f809 	jalr	t9
    1a94:	00000000 	nop
    1a98:	8fdc0010 	lw	gp,16(s8)
	    return concatenado;
    1a9c:	8fc20018 	lw	v0,24(s8)
}
    1aa0:	03c0e825 	move	sp,s8
    1aa4:	8fbf002c 	lw	ra,44(sp)
    1aa8:	8fbe0028 	lw	s8,40(sp)
    1aac:	8fb00024 	lw	s0,36(sp)
    1ab0:	27bd0030 	addiu	sp,sp,48
    1ab4:	03e00008 	jr	ra
    1ab8:	00000000 	nop
    1abc:	00000000 	nop

00001ac0 <caracter64equivalente>:
 *
 *  Created on: 13 oct. 2020
 *      Author: german
 */

char caracter64equivalente (int alDecimal){
    1ac0:	3c1c0002 	lui	gp,0x2
    1ac4:	279c8f10 	addiu	gp,gp,-28912
    1ac8:	0399e021 	addu	gp,gp,t9
    1acc:	27bdff98 	addiu	sp,sp,-104
    1ad0:	afbf0064 	sw	ra,100(sp)
    1ad4:	afbe0060 	sw	s8,96(sp)
    1ad8:	03a0f025 	move	s8,sp
    1adc:	afbc0010 	sw	gp,16(sp)
    1ae0:	afc40068 	sw	a0,104(s8)

	char caracterEquivalente;

	if (alDecimal<63){
    1ae4:	8fc20068 	lw	v0,104(s8)
    1ae8:	2842003f 	slti	v0,v0,63
    1aec:	10400014 	beqz	v0,1b40 <caracter64equivalente+0x80>
    1af0:	00000000 	nop
		char codigo[] = {'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
    1af4:	8f828030 	lw	v0,-32720(gp)
    1af8:	27c3001c 	addiu	v1,s8,28
    1afc:	244226b0 	addiu	v0,v0,9904
    1b00:	24040041 	li	a0,65
    1b04:	00803025 	move	a2,a0
    1b08:	00402825 	move	a1,v0
    1b0c:	00602025 	move	a0,v1
    1b10:	8f8280bc 	lw	v0,-32580(gp)
    1b14:	0040c825 	move	t9,v0
    1b18:	0320f809 	jalr	t9
    1b1c:	00000000 	nop
    1b20:	8fdc0010 	lw	gp,16(s8)
						'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
						'0','1','2','3','4','5','6','7','8','9','+','/','\0'};

		caracterEquivalente = codigo[alDecimal];
    1b24:	8fc20068 	lw	v0,104(s8)
    1b28:	27c30018 	addiu	v1,s8,24
    1b2c:	00621021 	addu	v0,v1,v0
    1b30:	90420004 	lbu	v0,4(v0)
    1b34:	a3c20018 	sb	v0,24(s8)
    1b38:	10000002 	b	1b44 <caracter64equivalente+0x84>
    1b3c:	00000000 	nop

	} else {

		caracterEquivalente ='\0';
    1b40:	a3c00018 	sb	zero,24(s8)
	}

	return caracterEquivalente;
    1b44:	83c20018 	lb	v0,24(s8)

}
    1b48:	03c0e825 	move	sp,s8
    1b4c:	8fbf0064 	lw	ra,100(sp)
    1b50:	8fbe0060 	lw	s8,96(sp)
    1b54:	27bd0068 	addiu	sp,sp,104
    1b58:	03e00008 	jr	ra
    1b5c:	00000000 	nop

00001b60 <valorBase64Equivalente>:
 *
 *  Created on: 13 oct. 2020
 *      Author: german
 */

int valorBase64Equivalente (char alCaracter) {
    1b60:	3c1c0002 	lui	gp,0x2
    1b64:	279c8e70 	addiu	gp,gp,-29072
    1b68:	0399e021 	addu	gp,gp,t9
    1b6c:	27bdff98 	addiu	sp,sp,-104
    1b70:	afbf0064 	sw	ra,100(sp)
    1b74:	afbe0060 	sw	s8,96(sp)
    1b78:	03a0f025 	move	s8,sp
    1b7c:	afbc0010 	sw	gp,16(sp)
    1b80:	00801025 	move	v0,a0
    1b84:	a3c20068 	sb	v0,104(s8)

	char codigo[] = {'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
    1b88:	8f828030 	lw	v0,-32720(gp)
    1b8c:	27c3001c 	addiu	v1,s8,28
    1b90:	24422700 	addiu	v0,v0,9984
    1b94:	24040041 	li	a0,65
    1b98:	00803025 	move	a2,a0
    1b9c:	00402825 	move	a1,v0
    1ba0:	00602025 	move	a0,v1
    1ba4:	8f8280bc 	lw	v0,-32580(gp)
    1ba8:	0040c825 	move	t9,v0
    1bac:	0320f809 	jalr	t9
    1bb0:	00000000 	nop
    1bb4:	8fdc0010 	lw	gp,16(s8)
						'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
						'0','1','2','3','4','5','6','7','8','9','+','/','\0'};

	int decimal=0;
    1bb8:	afc00018 	sw	zero,24(s8)

	while (codigo[decimal]!=alCaracter){
    1bbc:	1000000e 	b	1bf8 <valorBase64Equivalente+0x98>
    1bc0:	00000000 	nop
		if(decimal<63)
    1bc4:	8fc20018 	lw	v0,24(s8)
    1bc8:	2842003f 	slti	v0,v0,63
    1bcc:	10400006 	beqz	v0,1be8 <valorBase64Equivalente+0x88>
    1bd0:	00000000 	nop
		decimal++;
    1bd4:	8fc20018 	lw	v0,24(s8)
    1bd8:	24420001 	addiu	v0,v0,1
    1bdc:	afc20018 	sw	v0,24(s8)
    1be0:	10000005 	b	1bf8 <valorBase64Equivalente+0x98>
    1be4:	00000000 	nop
		else {
		decimal = -1;
    1be8:	2402ffff 	li	v0,-1
    1bec:	afc20018 	sw	v0,24(s8)
		break;
    1bf0:	10000008 	b	1c14 <valorBase64Equivalente+0xb4>
    1bf4:	00000000 	nop
	while (codigo[decimal]!=alCaracter){
    1bf8:	8fc20018 	lw	v0,24(s8)
    1bfc:	27c30018 	addiu	v1,s8,24
    1c00:	00621021 	addu	v0,v1,v0
    1c04:	80420004 	lb	v0,4(v0)
    1c08:	83c30068 	lb	v1,104(s8)
    1c0c:	1462ffed 	bne	v1,v0,1bc4 <valorBase64Equivalente+0x64>
    1c10:	00000000 	nop
		}
	}

	return decimal;
    1c14:	8fc20018 	lw	v0,24(s8)
}
    1c18:	03c0e825 	move	sp,s8
    1c1c:	8fbf0064 	lw	ra,100(sp)
    1c20:	8fbe0060 	lw	s8,96(sp)
    1c24:	27bd0068 	addiu	sp,sp,104
    1c28:	03e00008 	jr	ra
    1c2c:	00000000 	nop

00001c30 <mensaje_ayuda>:
 *  Created on: 18 oct. 2020
 *      Author: lucia
 */
#include "conversor.h"

void mensaje_ayuda() {
    1c30:	3c1c0002 	lui	gp,0x2
    1c34:	279c8da0 	addiu	gp,gp,-29280
    1c38:	0399e021 	addu	gp,gp,t9
    1c3c:	27bdffe0 	addiu	sp,sp,-32
    1c40:	afbf001c 	sw	ra,28(sp)
    1c44:	afbe0018 	sw	s8,24(sp)
    1c48:	03a0f025 	move	s8,sp
    1c4c:	afbc0010 	sw	gp,16(sp)
  	printf("Usage: \n");
    1c50:	8f828030 	lw	v0,-32720(gp)
    1c54:	24442750 	addiu	a0,v0,10064
    1c58:	8f8280a4 	lw	v0,-32604(gp)
    1c5c:	0040c825 	move	t9,v0
    1c60:	0320f809 	jalr	t9
    1c64:	00000000 	nop
    1c68:	8fdc0010 	lw	gp,16(s8)
	printf("	tp0 -h \n");
    1c6c:	8f828030 	lw	v0,-32720(gp)
    1c70:	24442758 	addiu	a0,v0,10072
    1c74:	8f8280a4 	lw	v0,-32604(gp)
    1c78:	0040c825 	move	t9,v0
    1c7c:	0320f809 	jalr	t9
    1c80:	00000000 	nop
    1c84:	8fdc0010 	lw	gp,16(s8)
	printf("	tp0 -V \n");
    1c88:	8f828030 	lw	v0,-32720(gp)
    1c8c:	24442764 	addiu	a0,v0,10084
    1c90:	8f8280a4 	lw	v0,-32604(gp)
    1c94:	0040c825 	move	t9,v0
    1c98:	0320f809 	jalr	t9
    1c9c:	00000000 	nop
    1ca0:	8fdc0010 	lw	gp,16(s8)
	printf("	tp0 [options] \n");
    1ca4:	8f828030 	lw	v0,-32720(gp)
    1ca8:	24442770 	addiu	a0,v0,10096
    1cac:	8f8280a4 	lw	v0,-32604(gp)
    1cb0:	0040c825 	move	t9,v0
    1cb4:	0320f809 	jalr	t9
    1cb8:	00000000 	nop
    1cbc:	8fdc0010 	lw	gp,16(s8)
	printf("Options: \n ");
    1cc0:	8f828030 	lw	v0,-32720(gp)
    1cc4:	24442780 	addiu	a0,v0,10112
    1cc8:	8f8280cc 	lw	v0,-32564(gp)
    1ccc:	0040c825 	move	t9,v0
    1cd0:	0320f809 	jalr	t9
    1cd4:	00000000 	nop
    1cd8:	8fdc0010 	lw	gp,16(s8)
	printf("	-V, --version     Print version and quit.\n" );
    1cdc:	8f828030 	lw	v0,-32720(gp)
    1ce0:	2444278c 	addiu	a0,v0,10124
    1ce4:	8f8280a4 	lw	v0,-32604(gp)
    1ce8:	0040c825 	move	t9,v0
    1cec:	0320f809 	jalr	t9
    1cf0:	00000000 	nop
    1cf4:	8fdc0010 	lw	gp,16(s8)
	printf("	-h, --help        Print this information. \n");
    1cf8:	8f828030 	lw	v0,-32720(gp)
    1cfc:	244427b8 	addiu	a0,v0,10168
    1d00:	8f8280a4 	lw	v0,-32604(gp)
    1d04:	0040c825 	move	t9,v0
    1d08:	0320f809 	jalr	t9
    1d0c:	00000000 	nop
    1d10:	8fdc0010 	lw	gp,16(s8)
	printf("	-o, --output      Path to output file. \n");
    1d14:	8f828030 	lw	v0,-32720(gp)
    1d18:	244427e4 	addiu	a0,v0,10212
    1d1c:	8f8280a4 	lw	v0,-32604(gp)
    1d20:	0040c825 	move	t9,v0
    1d24:	0320f809 	jalr	t9
    1d28:	00000000 	nop
    1d2c:	8fdc0010 	lw	gp,16(s8)
	printf("	-i, --input       Path to input file. \n");
    1d30:	8f828030 	lw	v0,-32720(gp)
    1d34:	24442810 	addiu	a0,v0,10256
    1d38:	8f8280a4 	lw	v0,-32604(gp)
    1d3c:	0040c825 	move	t9,v0
    1d40:	0320f809 	jalr	t9
    1d44:	00000000 	nop
    1d48:	8fdc0010 	lw	gp,16(s8)
	printf("	-d, --decode      Decode a base64-encoded file. \n");
    1d4c:	8f828030 	lw	v0,-32720(gp)
    1d50:	24442838 	addiu	a0,v0,10296
    1d54:	8f8280a4 	lw	v0,-32604(gp)
    1d58:	0040c825 	move	t9,v0
    1d5c:	0320f809 	jalr	t9
    1d60:	00000000 	nop
    1d64:	8fdc0010 	lw	gp,16(s8)
	printf("Examples: \n");
    1d68:	8f828030 	lw	v0,-32720(gp)
    1d6c:	2444286c 	addiu	a0,v0,10348
    1d70:	8f8280a4 	lw	v0,-32604(gp)
    1d74:	0040c825 	move	t9,v0
    1d78:	0320f809 	jalr	t9
    1d7c:	00000000 	nop
    1d80:	8fdc0010 	lw	gp,16(s8)
	printf("	tp0 -i input.txt -o output.txt \n");
    1d84:	8f828030 	lw	v0,-32720(gp)
    1d88:	24442878 	addiu	a0,v0,10360
    1d8c:	8f8280a4 	lw	v0,-32604(gp)
    1d90:	0040c825 	move	t9,v0
    1d94:	0320f809 	jalr	t9
    1d98:	00000000 	nop
    1d9c:	8fdc0010 	lw	gp,16(s8)
}
    1da0:	00000000 	nop
    1da4:	03c0e825 	move	sp,s8
    1da8:	8fbf001c 	lw	ra,28(sp)
    1dac:	8fbe0018 	lw	s8,24(sp)
    1db0:	27bd0020 	addiu	sp,sp,32
    1db4:	03e00008 	jr	ra
    1db8:	00000000 	nop

00001dbc <main>:


int main(int argc, char *argv[]) {
    1dbc:	3c1c0002 	lui	gp,0x2
    1dc0:	279c8c14 	addiu	gp,gp,-29676
    1dc4:	0399e021 	addu	gp,gp,t9
    1dc8:	27bdffc0 	addiu	sp,sp,-64
    1dcc:	afbf003c 	sw	ra,60(sp)
    1dd0:	afbe0038 	sw	s8,56(sp)
    1dd4:	03a0f025 	move	s8,sp
    1dd8:	afbc0010 	sw	gp,16(sp)
    1ddc:	afc40040 	sw	a0,64(s8)
    1de0:	afc50044 	sw	a1,68(s8)

	int modo=0; 			//0:INFO,1:ENCODER,2:DECODER
    1de4:	afc00018 	sw	zero,24(s8)

	char* inputName=NULL;
    1de8:	afc0001c 	sw	zero,28(s8)
	char* outputName=NULL;
    1dec:	afc00020 	sw	zero,32(s8)
	int flag=0;
    1df0:	afc00024 	sw	zero,36(s8)
	int ejecutar=0; 		//0:Ejecucion,1:ErrorParametros,2ó+:ErrorDeArchivos
    1df4:	afc00028 	sw	zero,40(s8)
	int end=0;
    1df8:	afc00034 	sw	zero,52(s8)
	int pipe=0; 			//0:Arch-->Arch,1:stdin-->Arch,2:Arch-->stdout,3:stdin-->stdout
    1dfc:	afc0002c 	sw	zero,44(s8)

	if (argc < 2) {
    1e00:	8fc20040 	lw	v0,64(s8)
    1e04:	28420002 	slti	v0,v0,2
    1e08:	10400007 	beqz	v0,1e28 <main+0x6c>
    1e0c:	00000000 	nop
		//ENCODER DESDE STDIN a STDOUT
		modo=1;
    1e10:	24020001 	li	v0,1
    1e14:	afc20018 	sw	v0,24(s8)
		pipe=3;
    1e18:	24020003 	li	v0,3
    1e1c:	afc2002c 	sw	v0,44(s8)
    1e20:	100000e1 	b	21a8 <main+0x3ec>
    1e24:	00000000 	nop
  	}

	else if (argc == 2){
    1e28:	8fc30040 	lw	v1,64(s8)
    1e2c:	24020002 	li	v0,2
    1e30:	1462003a 	bne	v1,v0,1f1c <main+0x160>
    1e34:	00000000 	nop
		if( strcmp(argv[1], "-h") == 0)
    1e38:	8fc20044 	lw	v0,68(s8)
    1e3c:	24420004 	addiu	v0,v0,4
    1e40:	8c430000 	lw	v1,0(v0)
    1e44:	8f828030 	lw	v0,-32720(gp)
    1e48:	2445289c 	addiu	a1,v0,10396
    1e4c:	00602025 	move	a0,v1
    1e50:	8f8280d8 	lw	v0,-32552(gp)
    1e54:	0040c825 	move	t9,v0
    1e58:	0320f809 	jalr	t9
    1e5c:	00000000 	nop
    1e60:	8fdc0010 	lw	gp,16(s8)
    1e64:	14400005 	bnez	v0,1e7c <main+0xc0>
    1e68:	00000000 	nop
			ejecutar =-1;
    1e6c:	2402ffff 	li	v0,-1
    1e70:	afc20028 	sw	v0,40(s8)
    1e74:	100000cc 	b	21a8 <main+0x3ec>
    1e78:	00000000 	nop

		else if (strcmp(argv[1], "-V") == 0) {
    1e7c:	8fc20044 	lw	v0,68(s8)
    1e80:	24420004 	addiu	v0,v0,4
    1e84:	8c430000 	lw	v1,0(v0)
    1e88:	8f828030 	lw	v0,-32720(gp)
    1e8c:	244528a0 	addiu	a1,v0,10400
    1e90:	00602025 	move	a0,v1
    1e94:	8f8280d8 	lw	v0,-32552(gp)
    1e98:	0040c825 	move	t9,v0
    1e9c:	0320f809 	jalr	t9
    1ea0:	00000000 	nop
    1ea4:	8fdc0010 	lw	gp,16(s8)
    1ea8:	14400005 	bnez	v0,1ec0 <main+0x104>
    1eac:	00000000 	nop
			ejecutar = -2;
    1eb0:	2402fffe 	li	v0,-2
    1eb4:	afc20028 	sw	v0,40(s8)
    1eb8:	100000bb 	b	21a8 <main+0x3ec>
    1ebc:	00000000 	nop

		} else if (strcmp(argv[1], "-d") == 0){
    1ec0:	8fc20044 	lw	v0,68(s8)
    1ec4:	24420004 	addiu	v0,v0,4
    1ec8:	8c430000 	lw	v1,0(v0)
    1ecc:	8f828030 	lw	v0,-32720(gp)
    1ed0:	244528a4 	addiu	a1,v0,10404
    1ed4:	00602025 	move	a0,v1
    1ed8:	8f8280d8 	lw	v0,-32552(gp)
    1edc:	0040c825 	move	t9,v0
    1ee0:	0320f809 	jalr	t9
    1ee4:	00000000 	nop
    1ee8:	8fdc0010 	lw	gp,16(s8)
    1eec:	14400007 	bnez	v0,1f0c <main+0x150>
    1ef0:	00000000 	nop
			//DECODER DESDE STDIN a STDOUT
			modo=2;
    1ef4:	24020002 	li	v0,2
    1ef8:	afc20018 	sw	v0,24(s8)
			pipe=3;
    1efc:	24020003 	li	v0,3
    1f00:	afc2002c 	sw	v0,44(s8)
    1f04:	100000a8 	b	21a8 <main+0x3ec>
    1f08:	00000000 	nop
		} else {
			ejecutar=1;
    1f0c:	24020001 	li	v0,1
    1f10:	afc20028 	sw	v0,40(s8)
    1f14:	100000a4 	b	21a8 <main+0x3ec>
    1f18:	00000000 	nop
		}
	}

	else if (argc > 2) {
    1f1c:	8fc20040 	lw	v0,64(s8)
    1f20:	28420003 	slti	v0,v0,3
    1f24:	144000a0 	bnez	v0,21a8 <main+0x3ec>
    1f28:	00000000 	nop

			for (int i = 1; i < argc ; i++){
    1f2c:	24020001 	li	v0,1
    1f30:	afc20030 	sw	v0,48(s8)
    1f34:	10000041 	b	203c <main+0x280>
    1f38:	00000000 	nop
				if ((strcmp(argv[i], "-i")) == 0)
    1f3c:	8fc20030 	lw	v0,48(s8)
    1f40:	00021080 	sll	v0,v0,0x2
    1f44:	8fc30044 	lw	v1,68(s8)
    1f48:	00621021 	addu	v0,v1,v0
    1f4c:	8c430000 	lw	v1,0(v0)
    1f50:	8f828030 	lw	v0,-32720(gp)
    1f54:	244528a8 	addiu	a1,v0,10408
    1f58:	00602025 	move	a0,v1
    1f5c:	8f8280d8 	lw	v0,-32552(gp)
    1f60:	0040c825 	move	t9,v0
    1f64:	0320f809 	jalr	t9
    1f68:	00000000 	nop
    1f6c:	8fdc0010 	lw	gp,16(s8)
    1f70:	14400008 	bnez	v0,1f94 <main+0x1d8>
    1f74:	00000000 	nop
					inputName = argv[i + 1];
    1f78:	8fc20030 	lw	v0,48(s8)
    1f7c:	24420001 	addiu	v0,v0,1
    1f80:	00021080 	sll	v0,v0,0x2
    1f84:	8fc30044 	lw	v1,68(s8)
    1f88:	00621021 	addu	v0,v1,v0
    1f8c:	8c420000 	lw	v0,0(v0)
    1f90:	afc2001c 	sw	v0,28(s8)
				if ((strcmp(argv[i], "-o")) == 0)
    1f94:	8fc20030 	lw	v0,48(s8)
    1f98:	00021080 	sll	v0,v0,0x2
    1f9c:	8fc30044 	lw	v1,68(s8)
    1fa0:	00621021 	addu	v0,v1,v0
    1fa4:	8c430000 	lw	v1,0(v0)
    1fa8:	8f828030 	lw	v0,-32720(gp)
    1fac:	244528ac 	addiu	a1,v0,10412
    1fb0:	00602025 	move	a0,v1
    1fb4:	8f8280d8 	lw	v0,-32552(gp)
    1fb8:	0040c825 	move	t9,v0
    1fbc:	0320f809 	jalr	t9
    1fc0:	00000000 	nop
    1fc4:	8fdc0010 	lw	gp,16(s8)
    1fc8:	14400008 	bnez	v0,1fec <main+0x230>
    1fcc:	00000000 	nop
					outputName = argv[i + 1];
    1fd0:	8fc20030 	lw	v0,48(s8)
    1fd4:	24420001 	addiu	v0,v0,1
    1fd8:	00021080 	sll	v0,v0,0x2
    1fdc:	8fc30044 	lw	v1,68(s8)
    1fe0:	00621021 	addu	v0,v1,v0
    1fe4:	8c420000 	lw	v0,0(v0)
    1fe8:	afc20020 	sw	v0,32(s8)
				if ((strcmp(argv[i], "-d")) == 0)
    1fec:	8fc20030 	lw	v0,48(s8)
    1ff0:	00021080 	sll	v0,v0,0x2
    1ff4:	8fc30044 	lw	v1,68(s8)
    1ff8:	00621021 	addu	v0,v1,v0
    1ffc:	8c430000 	lw	v1,0(v0)
    2000:	8f828030 	lw	v0,-32720(gp)
    2004:	244528a4 	addiu	a1,v0,10404
    2008:	00602025 	move	a0,v1
    200c:	8f8280d8 	lw	v0,-32552(gp)
    2010:	0040c825 	move	t9,v0
    2014:	0320f809 	jalr	t9
    2018:	00000000 	nop
    201c:	8fdc0010 	lw	gp,16(s8)
    2020:	14400003 	bnez	v0,2030 <main+0x274>
    2024:	00000000 	nop
					modo=2;
    2028:	24020002 	li	v0,2
    202c:	afc20018 	sw	v0,24(s8)
			for (int i = 1; i < argc ; i++){
    2030:	8fc20030 	lw	v0,48(s8)
    2034:	24420001 	addiu	v0,v0,1
    2038:	afc20030 	sw	v0,48(s8)
    203c:	8fc30030 	lw	v1,48(s8)
    2040:	8fc20040 	lw	v0,64(s8)
    2044:	0062102a 	slt	v0,v1,v0
    2048:	1440ffbc 	bnez	v0,1f3c <main+0x180>
    204c:	00000000 	nop
			}

			if (argc == 3) {
    2050:	8fc30040 	lw	v1,64(s8)
    2054:	24020003 	li	v0,3
    2058:	14620017 	bne	v1,v0,20b8 <main+0x2fc>
    205c:	00000000 	nop

					if (inputName != NULL) {
    2060:	8fc2001c 	lw	v0,28(s8)
    2064:	10400007 	beqz	v0,2084 <main+0x2c8>
    2068:	00000000 	nop
						//ENCODER DESDE ARCHIVO a STDOUT
						modo=1;
    206c:	24020001 	li	v0,1
    2070:	afc20018 	sw	v0,24(s8)
						pipe=2;
    2074:	24020002 	li	v0,2
    2078:	afc2002c 	sw	v0,44(s8)
    207c:	1000004a 	b	21a8 <main+0x3ec>
    2080:	00000000 	nop
					} else if (outputName!=NULL){
    2084:	8fc20020 	lw	v0,32(s8)
    2088:	10400007 	beqz	v0,20a8 <main+0x2ec>
    208c:	00000000 	nop
						//ENCODER DESDE STDIN a ARCHIVO
						modo=1;
    2090:	24020001 	li	v0,1
    2094:	afc20018 	sw	v0,24(s8)
						pipe=1;
    2098:	24020001 	li	v0,1
    209c:	afc2002c 	sw	v0,44(s8)
    20a0:	10000041 	b	21a8 <main+0x3ec>
    20a4:	00000000 	nop
					} else {
						ejecutar = 1;
    20a8:	24020001 	li	v0,1
    20ac:	afc20028 	sw	v0,40(s8)
    20b0:	1000003d 	b	21a8 <main+0x3ec>
    20b4:	00000000 	nop
					}

			} else if ((argc == 4) && (modo == 2)){
    20b8:	8fc30040 	lw	v1,64(s8)
    20bc:	24020004 	li	v0,4
    20c0:	14620017 	bne	v1,v0,2120 <main+0x364>
    20c4:	00000000 	nop
    20c8:	8fc30018 	lw	v1,24(s8)
    20cc:	24020002 	li	v0,2
    20d0:	14620013 	bne	v1,v0,2120 <main+0x364>
    20d4:	00000000 	nop

					if (inputName != NULL) {
    20d8:	8fc2001c 	lw	v0,28(s8)
    20dc:	10400005 	beqz	v0,20f4 <main+0x338>
    20e0:	00000000 	nop
						//DECODER DESDE ARCHIVO a STDOUT
						pipe=2;
    20e4:	24020002 	li	v0,2
    20e8:	afc2002c 	sw	v0,44(s8)
					if (inputName != NULL) {
    20ec:	1000002e 	b	21a8 <main+0x3ec>
    20f0:	00000000 	nop
					} else if (outputName != NULL){
    20f4:	8fc20020 	lw	v0,32(s8)
    20f8:	10400005 	beqz	v0,2110 <main+0x354>
    20fc:	00000000 	nop
						//DECODER DESDE STDIN a ARCHIVO
						pipe=1;
    2100:	24020001 	li	v0,1
    2104:	afc2002c 	sw	v0,44(s8)
					if (inputName != NULL) {
    2108:	10000027 	b	21a8 <main+0x3ec>
    210c:	00000000 	nop
					} else {
						ejecutar=1;
    2110:	24020001 	li	v0,1
    2114:	afc20028 	sw	v0,40(s8)
					if (inputName != NULL) {
    2118:	10000023 	b	21a8 <main+0x3ec>
    211c:	00000000 	nop
				}
			} else if ((argc == 5) && (inputName != NULL) && (outputName != NULL)){
    2120:	8fc30040 	lw	v1,64(s8)
    2124:	24020005 	li	v0,5
    2128:	1462000c 	bne	v1,v0,215c <main+0x3a0>
    212c:	00000000 	nop
    2130:	8fc2001c 	lw	v0,28(s8)
    2134:	10400009 	beqz	v0,215c <main+0x3a0>
    2138:	00000000 	nop
    213c:	8fc20020 	lw	v0,32(s8)
    2140:	10400006 	beqz	v0,215c <main+0x3a0>
    2144:	00000000 	nop
				//ENCODER ARCHIVO A ARCHIVO
				modo=1;
    2148:	24020001 	li	v0,1
    214c:	afc20018 	sw	v0,24(s8)
				pipe=0;
    2150:	afc0002c 	sw	zero,44(s8)
    2154:	10000014 	b	21a8 <main+0x3ec>
    2158:	00000000 	nop
			} else if ((argc == 6) && (inputName != NULL) && (outputName != NULL) && (modo==2)){
    215c:	8fc30040 	lw	v1,64(s8)
    2160:	24020006 	li	v0,6
    2164:	1462000e 	bne	v1,v0,21a0 <main+0x3e4>
    2168:	00000000 	nop
    216c:	8fc2001c 	lw	v0,28(s8)
    2170:	1040000b 	beqz	v0,21a0 <main+0x3e4>
    2174:	00000000 	nop
    2178:	8fc20020 	lw	v0,32(s8)
    217c:	10400008 	beqz	v0,21a0 <main+0x3e4>
    2180:	00000000 	nop
    2184:	8fc30018 	lw	v1,24(s8)
    2188:	24020002 	li	v0,2
    218c:	14620004 	bne	v1,v0,21a0 <main+0x3e4>
    2190:	00000000 	nop
				//DECODER ARCHIVO A ARCHIVO
				pipe=0;
    2194:	afc0002c 	sw	zero,44(s8)
    2198:	10000003 	b	21a8 <main+0x3ec>
    219c:	00000000 	nop
			} else {
				ejecutar=1;
    21a0:	24020001 	li	v0,1
    21a4:	afc20028 	sw	v0,40(s8)
			}
	}

	if (ejecutar == 0){ //--> modo=1 ó 2
    21a8:	8fc20028 	lw	v0,40(s8)
    21ac:	14400054 	bnez	v0,2300 <main+0x544>
    21b0:	00000000 	nop
		if (modo == 1) {
    21b4:	8fc30018 	lw	v1,24(s8)
    21b8:	24020001 	li	v0,1
    21bc:	1462000c 	bne	v1,v0,21f0 <main+0x434>
    21c0:	00000000 	nop
			flag=encode(inputName,outputName,pipe);
    21c4:	8fc6002c 	lw	a2,44(s8)
    21c8:	8fc50020 	lw	a1,32(s8)
    21cc:	8fc4001c 	lw	a0,28(s8)
    21d0:	8f828048 	lw	v0,-32696(gp)
    21d4:	0040c825 	move	t9,v0
    21d8:	0411fa79 	bal	bc0 <encode>
    21dc:	00000000 	nop
    21e0:	8fdc0010 	lw	gp,16(s8)
    21e4:	afc20024 	sw	v0,36(s8)
    21e8:	1000000a 	b	2214 <main+0x458>
    21ec:	00000000 	nop
		} else {
			flag=decode(inputName,outputName,pipe);
    21f0:	8fc6002c 	lw	a2,44(s8)
    21f4:	8fc50020 	lw	a1,32(s8)
    21f8:	8fc4001c 	lw	a0,28(s8)
    21fc:	8f82804c 	lw	v0,-32692(gp)
    2200:	0040c825 	move	t9,v0
    2204:	0411fc06 	bal	1220 <decode>
    2208:	00000000 	nop
    220c:	8fdc0010 	lw	gp,16(s8)
    2210:	afc20024 	sw	v0,36(s8)
		}

		if ((flag == 2) || (flag == 4)) {
    2214:	8fc30024 	lw	v1,36(s8)
    2218:	24020002 	li	v0,2
    221c:	10620005 	beq	v1,v0,2234 <main+0x478>
    2220:	00000000 	nop
    2224:	8fc30024 	lw	v1,36(s8)
    2228:	24020004 	li	v0,4
    222c:	1462000e 	bne	v1,v0,2268 <main+0x4ac>
    2230:	00000000 	nop
			 fprintf(stderr,"Error al abrir el archivo de entrada %s.\n",inputName);
    2234:	8f8280c4 	lw	v0,-32572(gp)
    2238:	8c430000 	lw	v1,0(v0)
    223c:	8fc6001c 	lw	a2,28(s8)
    2240:	8f828030 	lw	v0,-32720(gp)
    2244:	244528b0 	addiu	a1,v0,10416
    2248:	00602025 	move	a0,v1
    224c:	8f828090 	lw	v0,-32624(gp)
    2250:	0040c825 	move	t9,v0
    2254:	0320f809 	jalr	t9
    2258:	00000000 	nop
    225c:	8fdc0010 	lw	gp,16(s8)
    2260:	10000062 	b	23ec <main+0x630>
    2264:	00000000 	nop
		} else if ((flag == 3) || (flag == 5)){
    2268:	8fc30024 	lw	v1,36(s8)
    226c:	24020003 	li	v0,3
    2270:	10620005 	beq	v1,v0,2288 <main+0x4cc>
    2274:	00000000 	nop
    2278:	8fc30024 	lw	v1,36(s8)
    227c:	24020005 	li	v0,5
    2280:	1462000e 	bne	v1,v0,22bc <main+0x500>
    2284:	00000000 	nop
			fprintf(stderr,"Error al abrir el archivo de salida %s.\n",outputName);
    2288:	8f8280c4 	lw	v0,-32572(gp)
    228c:	8c430000 	lw	v1,0(v0)
    2290:	8fc60020 	lw	a2,32(s8)
    2294:	8f828030 	lw	v0,-32720(gp)
    2298:	244528dc 	addiu	a1,v0,10460
    229c:	00602025 	move	a0,v1
    22a0:	8f828090 	lw	v0,-32624(gp)
    22a4:	0040c825 	move	t9,v0
    22a8:	0320f809 	jalr	t9
    22ac:	00000000 	nop
    22b0:	8fdc0010 	lw	gp,16(s8)
    22b4:	1000004d 	b	23ec <main+0x630>
    22b8:	00000000 	nop
		} else if (flag == -1) {
    22bc:	8fc30024 	lw	v1,36(s8)
    22c0:	2402ffff 	li	v0,-1
    22c4:	14620049 	bne	v1,v0,23ec <main+0x630>
    22c8:	00000000 	nop
			fprintf(stderr,"El archivo %s no está en Base 64.\n",inputName);
    22cc:	8f8280c4 	lw	v0,-32572(gp)
    22d0:	8c430000 	lw	v1,0(v0)
    22d4:	8fc6001c 	lw	a2,28(s8)
    22d8:	8f828030 	lw	v0,-32720(gp)
    22dc:	24452908 	addiu	a1,v0,10504
    22e0:	00602025 	move	a0,v1
    22e4:	8f828090 	lw	v0,-32624(gp)
    22e8:	0040c825 	move	t9,v0
    22ec:	0320f809 	jalr	t9
    22f0:	00000000 	nop
    22f4:	8fdc0010 	lw	gp,16(s8)
    22f8:	1000003c 	b	23ec <main+0x630>
    22fc:	00000000 	nop
		}
	} else	if (ejecutar == 1){
    2300:	8fc30028 	lw	v1,40(s8)
    2304:	24020001 	li	v0,1
    2308:	1462000f 	bne	v1,v0,2348 <main+0x58c>
    230c:	00000000 	nop
		fprintf(stderr, "Error de parámetros ingresados, para ayuda ingrese -h \n");
    2310:	8f8280c4 	lw	v0,-32572(gp)
    2314:	8c420000 	lw	v0,0(v0)
    2318:	00403825 	move	a3,v0
    231c:	24060038 	li	a2,56
    2320:	24050001 	li	a1,1
    2324:	8f828030 	lw	v0,-32720(gp)
    2328:	2444292c 	addiu	a0,v0,10540
    232c:	8f8280b8 	lw	v0,-32584(gp)
    2330:	0040c825 	move	t9,v0
    2334:	0320f809 	jalr	t9
    2338:	00000000 	nop
    233c:	8fdc0010 	lw	gp,16(s8)
    2340:	1000002a 	b	23ec <main+0x630>
    2344:	00000000 	nop
	} else if (ejecutar > 1) {
    2348:	8fc20028 	lw	v0,40(s8)
    234c:	28420002 	slti	v0,v0,2
    2350:	1440000f 	bnez	v0,2390 <main+0x5d4>
    2354:	00000000 	nop
		fprintf(stderr, "Error en archivos, para ayuda ingrese -h \n");
    2358:	8f8280c4 	lw	v0,-32572(gp)
    235c:	8c420000 	lw	v0,0(v0)
    2360:	00403825 	move	a3,v0
    2364:	2406002a 	li	a2,42
    2368:	24050001 	li	a1,1
    236c:	8f828030 	lw	v0,-32720(gp)
    2370:	24442968 	addiu	a0,v0,10600
    2374:	8f8280b8 	lw	v0,-32584(gp)
    2378:	0040c825 	move	t9,v0
    237c:	0320f809 	jalr	t9
    2380:	00000000 	nop
    2384:	8fdc0010 	lw	gp,16(s8)
    2388:	10000018 	b	23ec <main+0x630>
    238c:	00000000 	nop
	} else if (ejecutar == -1){
    2390:	8fc30028 	lw	v1,40(s8)
    2394:	2402ffff 	li	v0,-1
    2398:	14620008 	bne	v1,v0,23bc <main+0x600>
    239c:	00000000 	nop
		mensaje_ayuda();
    23a0:	8f828050 	lw	v0,-32688(gp)
    23a4:	0040c825 	move	t9,v0
    23a8:	0411fe21 	bal	1c30 <mensaje_ayuda>
    23ac:	00000000 	nop
    23b0:	8fdc0010 	lw	gp,16(s8)
    23b4:	1000000d 	b	23ec <main+0x630>
    23b8:	00000000 	nop
	} else if (ejecutar == -2) {
    23bc:	8fc30028 	lw	v1,40(s8)
    23c0:	2402fffe 	li	v0,-2
    23c4:	14620009 	bne	v1,v0,23ec <main+0x630>
    23c8:	00000000 	nop
		printf("Versión del TP: %d \n", VERSION);
    23cc:	00002825 	move	a1,zero
    23d0:	8f828030 	lw	v0,-32720(gp)
    23d4:	24442994 	addiu	a0,v0,10644
    23d8:	8f8280cc 	lw	v0,-32564(gp)
    23dc:	0040c825 	move	t9,v0
    23e0:	0320f809 	jalr	t9
    23e4:	00000000 	nop
    23e8:	8fdc0010 	lw	gp,16(s8)
	}

	return end;
    23ec:	8fc20034 	lw	v0,52(s8)
}
    23f0:	03c0e825 	move	sp,s8
    23f4:	8fbf003c 	lw	ra,60(sp)
    23f8:	8fbe0038 	lw	s8,56(sp)
    23fc:	27bd0040 	addiu	sp,sp,64
    2400:	03e00008 	jr	ra
    2404:	00000000 	nop
	...

00002410 <__libc_csu_init>:
    2410:	3c1c0002 	lui	gp,0x2
    2414:	279c85c0 	addiu	gp,gp,-31296
    2418:	0399e021 	addu	gp,gp,t9
    241c:	27bdffc8 	addiu	sp,sp,-56
    2420:	8f998054 	lw	t9,-32684(gp)
    2424:	afbc0010 	sw	gp,16(sp)
    2428:	afb50030 	sw	s5,48(sp)
    242c:	00c0a825 	move	s5,a2
    2430:	afb4002c 	sw	s4,44(sp)
    2434:	00a0a025 	move	s4,a1
    2438:	afb30028 	sw	s3,40(sp)
    243c:	00809825 	move	s3,a0
    2440:	afb20024 	sw	s2,36(sp)
    2444:	afb0001c 	sw	s0,28(sp)
    2448:	afbf0034 	sw	ra,52(sp)
    244c:	0411f95d 	bal	9c4 <_init>
    2450:	afb10020 	sw	s1,32(sp)
    2454:	8fbc0010 	lw	gp,16(sp)
    2458:	8f908058 	lw	s0,-32680(gp)
    245c:	8f92805c 	lw	s2,-32676(gp)
    2460:	02509023 	subu	s2,s2,s0
    2464:	00129083 	sra	s2,s2,0x2
    2468:	12400009 	beqz	s2,2490 <__libc_csu_init+0x80>
    246c:	00008825 	move	s1,zero
    2470:	8e190000 	lw	t9,0(s0)
    2474:	26310001 	addiu	s1,s1,1
    2478:	02a03025 	move	a2,s5
    247c:	02802825 	move	a1,s4
    2480:	0320f809 	jalr	t9
    2484:	02602025 	move	a0,s3
    2488:	1651fff9 	bne	s2,s1,2470 <__libc_csu_init+0x60>
    248c:	26100004 	addiu	s0,s0,4
    2490:	8fbf0034 	lw	ra,52(sp)
    2494:	8fb50030 	lw	s5,48(sp)
    2498:	8fb4002c 	lw	s4,44(sp)
    249c:	8fb30028 	lw	s3,40(sp)
    24a0:	8fb20024 	lw	s2,36(sp)
    24a4:	8fb10020 	lw	s1,32(sp)
    24a8:	8fb0001c 	lw	s0,28(sp)
    24ac:	03e00008 	jr	ra
    24b0:	27bd0038 	addiu	sp,sp,56

000024b4 <__libc_csu_fini>:
    24b4:	03e00008 	jr	ra
    24b8:	00000000 	nop
    24bc:	00000000 	nop

Disassembly of section .MIPS.stubs:

000024c0 <_MIPS_STUBS_>:
    24c0:	8f998010 	lw	t9,-32752(gp)
    24c4:	03e07825 	move	t7,ra
    24c8:	0320f809 	jalr	t9
    24cc:	2418002c 	li	t8,44
    24d0:	8f998010 	lw	t9,-32752(gp)
    24d4:	03e07825 	move	t7,ra
    24d8:	0320f809 	jalr	t9
    24dc:	24180029 	li	t8,41
    24e0:	8f998010 	lw	t9,-32752(gp)
    24e4:	03e07825 	move	t7,ra
    24e8:	0320f809 	jalr	t9
    24ec:	24180028 	li	t8,40
    24f0:	8f998010 	lw	t9,-32752(gp)
    24f4:	03e07825 	move	t7,ra
    24f8:	0320f809 	jalr	t9
    24fc:	24180026 	li	t8,38
    2500:	8f998010 	lw	t9,-32752(gp)
    2504:	03e07825 	move	t7,ra
    2508:	0320f809 	jalr	t9
    250c:	24180025 	li	t8,37
    2510:	8f998010 	lw	t9,-32752(gp)
    2514:	03e07825 	move	t7,ra
    2518:	0320f809 	jalr	t9
    251c:	24180024 	li	t8,36
    2520:	8f998010 	lw	t9,-32752(gp)
    2524:	03e07825 	move	t7,ra
    2528:	0320f809 	jalr	t9
    252c:	24180023 	li	t8,35
    2530:	8f998010 	lw	t9,-32752(gp)
    2534:	03e07825 	move	t7,ra
    2538:	0320f809 	jalr	t9
    253c:	24180022 	li	t8,34
    2540:	8f998010 	lw	t9,-32752(gp)
    2544:	03e07825 	move	t7,ra
    2548:	0320f809 	jalr	t9
    254c:	24180021 	li	t8,33
    2550:	8f998010 	lw	t9,-32752(gp)
    2554:	03e07825 	move	t7,ra
    2558:	0320f809 	jalr	t9
    255c:	24180020 	li	t8,32
    2560:	8f998010 	lw	t9,-32752(gp)
    2564:	03e07825 	move	t7,ra
    2568:	0320f809 	jalr	t9
    256c:	2418001f 	li	t8,31
    2570:	8f998010 	lw	t9,-32752(gp)
    2574:	03e07825 	move	t7,ra
    2578:	0320f809 	jalr	t9
    257c:	2418001d 	li	t8,29
    2580:	8f998010 	lw	t9,-32752(gp)
    2584:	03e07825 	move	t7,ra
    2588:	0320f809 	jalr	t9
    258c:	2418001c 	li	t8,28
    2590:	8f998010 	lw	t9,-32752(gp)
    2594:	03e07825 	move	t7,ra
    2598:	0320f809 	jalr	t9
    259c:	2418001b 	li	t8,27
    25a0:	8f998010 	lw	t9,-32752(gp)
    25a4:	03e07825 	move	t7,ra
    25a8:	0320f809 	jalr	t9
    25ac:	2418001a 	li	t8,26
    25b0:	8f998010 	lw	t9,-32752(gp)
    25b4:	03e07825 	move	t7,ra
    25b8:	0320f809 	jalr	t9
    25bc:	24180018 	li	t8,24
    25c0:	8f998010 	lw	t9,-32752(gp)
    25c4:	03e07825 	move	t7,ra
    25c8:	0320f809 	jalr	t9
    25cc:	24180016 	li	t8,22
    25d0:	8f998010 	lw	t9,-32752(gp)
    25d4:	03e07825 	move	t7,ra
    25d8:	0320f809 	jalr	t9
    25dc:	24180014 	li	t8,20
    25e0:	8f998010 	lw	t9,-32752(gp)
    25e4:	03e07825 	move	t7,ra
    25e8:	0320f809 	jalr	t9
    25ec:	24180012 	li	t8,18
    25f0:	8f998010 	lw	t9,-32752(gp)
    25f4:	03e07825 	move	t7,ra
    25f8:	0320f809 	jalr	t9
    25fc:	24180011 	li	t8,17
	...

Disassembly of section .fini:

00002610 <_fini>:
    2610:	3c1c0002 	lui	gp,0x2
    2614:	279c83c0 	addiu	gp,gp,-31808
    2618:	0399e021 	addu	gp,gp,t9
    261c:	27bdffe0 	addiu	sp,sp,-32
    2620:	afbc0010 	sw	gp,16(sp)
    2624:	afbf001c 	sw	ra,28(sp)
    2628:	8fbf001c 	lw	ra,28(sp)
    262c:	03e00008 	jr	ra
    2630:	27bd0020 	addiu	sp,sp,32

